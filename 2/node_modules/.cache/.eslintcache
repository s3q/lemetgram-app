[{"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\index.js":"1","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\App.js":"2","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\ApiContext.js":"3","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\context\\AuthContext.js":"4","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Home.jsx":"5","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Profile.jsx":"6","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Login.jsx":"7","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Settings.jsx":"8","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Explore.jsx":"9","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\Navbar.jsx":"10","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\chat\\Chat.jsx":"11","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Register.jsx":"12","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\context\\AuthReducer.js":"13","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\router\\Preview.js":"14","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\router\\Create.js":"15","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\router\\Chat.js":"16","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\functions\\Browser.js":"17","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\functions\\Api.js":"18","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\Body.jsx":"19","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\AsideBar.jsx":"20","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\ProfileBody.jsx":"21","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\LoginBody.jsx":"22","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\ChatBody.jsx":"23","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\RegisterBody.jsx":"24","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\preview\\PreviewPost.jsx":"25","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\create\\CreatePost.jsx":"26","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\Post.jsx":"27","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\SahreBar.jsx":"28","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\CreatePostBody.jsx":"29","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\constant\\general.js":"30","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\elements\\TabPanel.jsx":"31","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\elements\\Button.jsx":"32"},{"size":780,"mtime":1628863632341,"results":"33","hashOfConfig":"34"},{"size":3001,"mtime":1628835788989,"results":"35","hashOfConfig":"34"},{"size":2268,"mtime":1628788766665,"results":"36","hashOfConfig":"34"},{"size":1398,"mtime":1628839295957,"results":"37","hashOfConfig":"34"},{"size":733,"mtime":1628839544667,"results":"38","hashOfConfig":"34"},{"size":2800,"mtime":1628835837899,"results":"39","hashOfConfig":"34"},{"size":640,"mtime":1628788766701,"results":"40","hashOfConfig":"34"},{"size":859,"mtime":1628788766704,"results":"41","hashOfConfig":"34"},{"size":1547,"mtime":1628788766700,"results":"42","hashOfConfig":"34"},{"size":11157,"mtime":1628945717208,"results":"43","hashOfConfig":"34"},{"size":277,"mtime":1628840285675,"results":"44","hashOfConfig":"34"},{"size":557,"mtime":1628835841289,"results":"45","hashOfConfig":"34"},{"size":831,"mtime":1628788766694,"results":"46","hashOfConfig":"34"},{"size":359,"mtime":1628788766724,"results":"47","hashOfConfig":"34"},{"size":350,"mtime":1628788766723,"results":"48","hashOfConfig":"34"},{"size":500,"mtime":1628788766723,"results":"49","hashOfConfig":"34"},{"size":4108,"mtime":1628788766698,"results":"50","hashOfConfig":"34"},{"size":11063,"mtime":1628839374050,"results":"51","hashOfConfig":"34"},{"size":2998,"mtime":1628788766672,"results":"52","hashOfConfig":"34"},{"size":6567,"mtime":1628788766671,"results":"53","hashOfConfig":"34"},{"size":11697,"mtime":1628839526233,"results":"54","hashOfConfig":"34"},{"size":8004,"mtime":1628788766676,"results":"55","hashOfConfig":"34"},{"size":16418,"mtime":1628860067164,"results":"56","hashOfConfig":"34"},{"size":12621,"mtime":1628841639209,"results":"57","hashOfConfig":"34"},{"size":594,"mtime":1628788766718,"results":"58","hashOfConfig":"34"},{"size":480,"mtime":1628788766717,"results":"59","hashOfConfig":"34"},{"size":14206,"mtime":1628842120082,"results":"60","hashOfConfig":"34"},{"size":1513,"mtime":1628788766680,"results":"61","hashOfConfig":"34"},{"size":7005,"mtime":1628841617180,"results":"62","hashOfConfig":"34"},{"size":340,"mtime":1628842301694,"results":"63","hashOfConfig":"34"},{"size":854,"mtime":1628860287220,"results":"64","hashOfConfig":"34"},{"size":599,"mtime":1628940942084,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},"zbd6s9",{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"69"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"69"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"69"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"69"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"69"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"69"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"69"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"69"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"69"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"69"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"69"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"69"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"69"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"69"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"69"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"69"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"69"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"69"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"156"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"69"},"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\index.js",["160","161","162","163"],"import React, {useContext, useEffect} from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\n// import \"materialize-css\"\r\n\r\nimport App from './App';\r\nimport { AuthContextProvider, AuthContext } from './context/AuthContext';\r\nimport { updateLoginApiContext } from \"./ApiContext\"\r\n\r\nfunction Main() {\r\n   \r\n    ReactDOM.render(\r\n        <React.StrictMode>\r\n            <AuthContextProvider>\r\n                <App />\r\n            </AuthContextProvider>\r\n        </React.StrictMode>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\n\r\nMain()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n",["164","165"],"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\App.js",["166","167","168","169","170"],"\r\nimport React, { useState, useContext, useEffect } from 'react'\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n\r\n} from \"react-router-dom\";\r\n\r\n// Pages \r\nimport Home from \"./pages/Home.jsx\"\r\nimport Profile from \"./pages/Profile.jsx\"\r\nimport Settings from \"./pages/Settings.jsx\"\r\nimport Login from \"./pages/Login.jsx\"\r\nimport Register from \"./pages/Register.jsx\"\r\nimport Navbar from \"./components/Navbar.jsx\"\r\nimport Explore from \"./pages/Explore.jsx\"\r\n\r\nimport Chat from \"./pages/chat/Chat.jsx\"\r\n\r\n// Router\r\nimport CreateRouter from \"./router/Create\"\r\nimport PreviewRouter from \"./router/Preview\"\r\nimport ChatRouter from \"./router/Chat\"\r\n\r\n\r\nimport Browser from \"./functions/Browser\"\r\nimport { AuthContext } from \"./context/AuthContext.js\"\r\nimport { updateLoginApiContext, autoLoginApiContext } from \"./ApiContext\"\r\n\r\n\r\nconst updateLogin = async (dispatch) => {\r\n    await updateLoginApiContext(dispatch)\r\n    setInterval(async () => {\r\n        await updateLoginApiContext(dispatch)\r\n    }, 20000)\r\n}\r\n\r\n\r\nfunction App() {\r\n    const context = useContext(AuthContext)\r\n    const [isLogin, setIsLogin] = useState(true)\r\n\r\n    useEffect(async () => {\r\n        await autoLoginApiContext(context.dispatch)\r\n        await updateLogin(context.dispatch)\r\n    }, []);\r\n\r\n    const handleRedirect = () => {\r\n\r\n        const loginId = Browser.getCookie(\"loginId\")\r\n        const userId = Browser.getCookie(\"userId\")\r\n\r\n        if (userId && loginId) {\r\n            return null\r\n        } else {\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n            <Navbar isUserLogin={true} />\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    {context.user?._id ? <Home /> : handleRedirect()}\r\n                </Route>\r\n                <Route path=\"/profile/:username\">\r\n                    {context.user?._id ? <Profile /> : handleRedirect()}\r\n                </Route>\r\n                <Route path=\"/login\">\r\n                    <Login />\r\n                </Route>\r\n                <Route path=\"/register\">\r\n                    <Register />\r\n                </Route>\r\n                <Route exact path=\"/preview/post/:id\">\r\n                    {context.user?._id ? <PreviewRouter /> : handleRedirect()}\r\n                </Route>\r\n                <Route path=\"/create\">\r\n                    {context.user?._id ? <CreateRouter /> : handleRedirect()}\r\n                </Route>\r\n                <Route path=\"/settings\">\r\n                    {context.user?._id ? <Settings /> : handleRedirect()}\r\n\r\n                </Route>\r\n                <Route path=\"/chat\">\r\n                    {context.user?._id ? <ChatRouter /> : handleRedirect()}\r\n    \r\n                </Route>\r\n                <Route path=\"/explore\">\r\n                    {context.user?._id ? <Explore /> : handleRedirect()}\r\n    \r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\ApiContext.js",["171","172"],"import Api from \"./functions/Api\"\r\nimport Browser from \"./functions/Browser\"\r\n\r\nexport const autoLoginApiContext = async (dispatch) => {\r\n\r\n    const loginId = Browser.getCookie(\"loginId\")\r\n    const userId = Browser.getCookie(\"userId\")\r\n\r\n    console.log(loginId, userId)\r\n    if (userId && loginId) {\r\n        await Api.fetchSaveLoginUser(loginId, userId).then(res => {\r\n            if (res.status == 200 && res.data && res.data != {}) {\r\n                dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data })\r\n                \r\n                // let lastUrlVistedArray = Browser.getHistoryUrl()\r\n                // console.log(lastUrlVistedArray)\r\n                // let lastUrlVisted = lastUrlVistedArray[lastUrlVistedArray.length - 1]\r\n                // console.log(lastUrlVisted, window.location.href, lastUrlVisted != window.location.href)\r\n\r\n                // if (lastUrlVisted != window.location.href) {\r\n\r\n                //     window.location.href = lastUrlVisted\r\n                // }\r\n                // else {\r\n                //     window.location.href = window.location.host\r\n                // }\r\n            } else {\r\n                dispatch({ type: \"LOGIN_FAILURE\", payload: {} })\r\n                window.location.pathname = \"/login\"\r\n            }\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateLoginApiContext = async (dispatch) => {\r\n\r\n    const loginId = Browser.getCookie(\"loginId\")\r\n    const userId = Browser.getCookie(\"userId\")\r\n\r\n    if (userId && loginId) {\r\n\r\n        await Api.updateLoginUser(loginId, userId).then(res => {\r\n            dispatch({ type: \"UPDATE_LOGIN\", payload: res.data })\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const loginApiContext = async (userCredentials, dispatch) => {\r\n    dispatch({ type: \"LOGIN_START\" })\r\n    try {\r\n        const res = await Api.loginUser(userCredentials).then(res => {\r\n            dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data })\r\n\r\n            Api.saveLoginUser(userCredentials).then(resLogin => {\r\n                Browser.setCookie(\"loginId\", resLogin.data.login_id, 10)\r\n                Browser.setCookie(\"userId\", resLogin.data.user_id, 10)\r\n            })\r\n        })\r\n        return res\r\n    } catch (err) {\r\n        dispatch({ type: \"LOGIN_FAILURE\", payload: err })\r\n    }\r\n}","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\context\\AuthContext.js",["173","174","175"],"import { createContext, useReducer , useEffect, useState, useRef} from \"react\"\r\nimport Api from \"../functions/Api\"\r\nimport Browser from \"../functions/Browser\"\r\nimport AuthReducer from \"./AuthReducer\"\r\n\r\nimport { io } from \"socket.io-client\"\r\n\r\nimport constants from \"../constant/general\";\r\n\r\nconst INITAL_STATE = {\r\n    user: null,\r\n    isFetching: false,\r\n    error: false\r\n}\r\n\r\nexport const AuthContext = createContext(INITAL_STATE)\r\n\r\nexport const AuthContextProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AuthReducer, INITAL_STATE)\r\n    const [usersIsConnected, setUsersIsConnected] = useState([])\r\n    const [socket, setSocket] = useState([])\r\n      \r\n    useEffect(() => setSocket(io(constants.socket)), [])\r\n\r\n    useEffect(() => {\r\n        \r\n    \r\n        if (state.user && state.user._id) {\r\n            socket.emit(\"isConnected\", state.user._id)\r\n            socket.on(\"usersIsConnected\", users => {\r\n                console.log(users)\r\n                setUsersIsConnected(users)\r\n            })\r\n        }\r\n    }, [socket, state])\r\n\r\n\r\n    return (\r\n        <AuthContext.Provider value={{\r\n            user: state.user,\r\n            isFetching: state.isFetching,\r\n            error: state.error,\r\n\r\n            socket: socket,\r\n            usersIsConnected,\r\n\r\n            dispatch\r\n        }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n}","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Home.jsx",["176","177","178","179","180","181","182"],"import React, { Component, useContext, useState, useEffect} from 'react'\r\n\r\n// components :\r\nimport Navbar from \"../components/Navbar.jsx\"\r\nimport AsideBar from \"../components/AsideBar.jsx\"\r\nimport Body from \"../components/Body.jsx\"\r\n\r\n// context :\r\nimport { AuthContext } from '../context/AuthContext.js'\r\nimport { autoLoginApiContext } from \"../ApiContext\"\r\n\r\n\r\nexport default function Home() {\r\n    const context = useContext(AuthContext)\r\n    \r\n    const [ user, setUser ] = useState() \r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"d-flex flex-column flex-md-row h-100 position-relative\">\r\n                <AsideBar />\r\n                <Body />\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Profile.jsx",["183","184","185","186","187","188","189","190","191"],"import React, { Component, useState, useContext, useEffect } from 'react'\r\n\r\nimport Navbar from \"../components/Navbar.jsx\"\r\nimport AsideBar from \"../components/AsideBar.jsx\"\r\nimport ProfileBody from \"../components/ProfileBody.jsx\"\r\nimport Post from \"../components/Post\"\r\n\r\nimport Api from \"../functions/Api\"\r\nimport Browser from \"../functions/Browser\"\r\n\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\n\r\n\r\nimport { useParams } from \"react-router-dom\";\r\nimport { AuthContext } from '../context/AuthContext.js'\r\n\r\n\r\n\r\nexport default function Profile() {\r\n\r\n    const context = useContext(AuthContext)\r\n\r\n    const { username } = useParams()\r\n\r\n    const [user, setUser] = useState({})\r\n    const [posts, setPosts] = useState([])\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [isFinishing, setIsFinishing] = useState(false)\r\n\r\n\r\n\r\n    useEffect(async () => {\r\n        setIsFetching(false)\r\n        await fetchUser()\r\n    }, [username])\r\n\r\n    const fetchUser = async () => {\r\n        setIsFetching(true)\r\n        await Api.fetchUser(username, \"username\").then(res => {\r\n            console.log(res)\r\n            setUser(res.data)\r\n            fetchPosts(res.data)\r\n        })\r\n    }\r\n\r\n\r\n    const fetchPosts = async (user) => {\r\n        await Api.fetchUserPosts(user._id).then(res => {\r\n            setPosts(res.data)\r\n            setIsFetching(false)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"d-flex flex-column flex-md-row h-100 position-relative\">\r\n                <AsideBar />\r\n                <div className=\"body-container\">\r\n                    <div className=\"mb-4\">\r\n                        {\r\n                            isFetching ?\r\n                                <LinearProgress />\r\n                                :\r\n                                <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>\r\n                        }\r\n                    </div>\r\n                    <ProfileBody user={user} />\r\n                    <div className=\"mb-4\">\r\n\r\n                        {\r\n                            isFetching ?\r\n                                <LinearProgress />\r\n                                :\r\n                                <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>\r\n                        }\r\n                    </div>\r\n                    <div className=\"mb-5\">\r\n\r\n                        {\r\n                            posts.map(post => {\r\n                                return <Post key={post._id} postId={post._id} state={{ posts: posts, setPosts: setPosts}} />\r\n                            })\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Login.jsx",["192","193","194","195","196"],"import React from 'react'\r\nimport Navbar from \"../components/Navbar.jsx\"\r\nimport AsideBar from \"../components/AsideBar.jsx\"\r\nimport LoginBody from \"../components/LoginBody.jsx\"\r\n\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nexport default function Login() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n                <div className=\"d-flex flex-row justify-content-center h-100 position-relative\">\r\n                    <div className=\"body-container mt-5\">\r\n                        <LoginBody />\r\n                    </div>\r\n                </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Settings.jsx",["197","198","199","200","201"],"import { Redirect, useHistory } from 'react-router-dom'\r\nimport React, { useContext, useEffect } from 'react'\r\n\r\nimport Api from '../functions/Api'\r\n\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { updateLoginApiContext } from \"../ApiContext\"\r\n\r\n\r\nexport default function Settings() {\r\n    const context = useContext(AuthContext)\r\n    const history = useHistory()\r\n\r\n\r\n    const handleDeleteUser = async () => {\r\n        console.log(context.user._id)\r\n        Api.deleteUser(context.user._id, context.user._id).then(res => {\r\n            if (res == 200) {\r\n                console.log(context)\r\n                return window.location.pathname = \"/\"\r\n            }\r\n        })\r\n    }\r\n    return (\r\n        <div>\r\n            <button className=\"btn btn-primary \" onClick={handleDeleteUser} >delete this user</button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Explore.jsx",["202","203","204","205"],"import React, { Component, useContext, useState, useEffect } from 'react'\r\nimport {\r\n    Link,\r\n    useParams,\r\n    useHistory\r\n\r\n} from 'react-router-dom';\r\n\r\n\r\n// components :\r\nimport AsideBar from \"../components/AsideBar.jsx\"\r\n\r\n// context :\r\nimport { AuthContext } from '../context/AuthContext.js'\r\nimport Api from '../functions/Api.js'\r\n\r\n\r\nexport default function Explore() {\r\n    const context = useContext(AuthContext)\r\n    const [allUsers, setAllUsers] = useState([])\r\n\r\n    useEffect(() => {\r\n        Api.fetchAllUsers().then(res => {\r\n            console.log(res.data)\r\n            setAllUsers(res.data)\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"d-flex flex-column flex-md-row h-100 position-relative\">\r\n                <AsideBar />\r\n                <div className=\"body-container\">\r\n                    {\r\n                        allUsers.map(user => {\r\n                            return <Link className=\"btn btn-light d-flex align-items-center m-5\" key={user._id} to={`/profile/${user.username}`} >\r\n\r\n                                <div className=\"profileImg\" style={{ backgroundImage: `url(${user.profileImg})` }}></div>\r\n                                <span className=\"username position-relative\" href=\"#\">\r\n                                    {user.username}\r\n                                </span>\r\n\r\n                            </Link>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\Navbar.jsx",["206","207","208","209","210","211","212","213","214","215","216","217","218","219","220"],"import React, { Component, useState, useEffect, useContext } from 'react'\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, Tabs, Tab, Button, Menu, MenuItem, Badge, } from '@material-ui/core';\r\nimport { List, ListItem, ListItemIcon, ListItemText, Divider } from '@material-ui/core';\r\nimport { Zoom, Slide } from '@material-ui/core';\r\n// import Tabs from '@material-ui/core/Tabs';\r\n// import Tab from '@material-ui/core/Tab';\r\n// import Button from '@material-ui/core/Button';\r\n// import Menu from '@material-ui/core/Menu';\r\n// import MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport HomeRoundedIcon from '@material-ui/icons/HomeRounded';\r\nimport AppsRoundedIcon from '@material-ui/icons/AppsRounded';\r\nimport ForumRoundedIcon from '@material-ui/icons/ForumRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport GradeRoundedIcon from '@material-ui/icons/GradeRounded';\r\nimport ExploreIcon from '@material-ui/icons/Explore';\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport MeetingRoomRoundedIcon from '@material-ui/icons/MeetingRoomRounded';\r\nimport SettingsRoundedIcon from '@material-ui/icons/SettingsRounded';\r\n\r\nimport LockOpenRoundedIcon from '@material-ui/icons/LockOpenRounded';\r\nimport { Link, useParams, useHistory, useLocation } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { updateLoginApiContext } from \"../ApiContext\"\r\n\r\nimport Browser from \"../functions/Browser\"\r\nimport Api from '../functions/Api';\r\nimport { Btn } from './elements/Button.jsx';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n        width: \"100%\"\r\n    },\r\n\r\n});\r\n\r\n\r\n\r\nfunction Nav() {\r\n    const classes = useStyles();\r\n\r\n    const history = useHistory()\r\n    const [path, setPath] = useState(window.location.pathname)\r\n    const [value, setValue] = React.useState(0);\r\n\r\n    useEffect(() => {\r\n        handleChange()\r\n        history.listen((location) => {\r\n            setPath(location.pathname)\r\n        })\r\n    }, [path, history])\r\n\r\n    const arrayPaths = [\"/\", \"/chat\", \"/explore\", \"/not\"]\r\n\r\n\r\n    const handleChange = () => {\r\n        let newIndex = arrayPaths.indexOf(path)\r\n        if (newIndex == 0 && path != \"/\") {\r\n            return;\r\n        }\r\n        setValue(newIndex);\r\n\r\n    };\r\n\r\n    const handleClick = (event, newValue) => {\r\n        setValue(newValue);\r\n        console.log(arrayPaths[newValue])\r\n        history.push(`${arrayPaths[newValue]}`)\r\n    };\r\n\r\n    return (\r\n        <Paper className={classes.root, \"\"}>\r\n            <Tabs\r\n                value={value}\r\n                onChange={handleClick}\r\n                indicatorColor=\"primary\"\r\n                textColor=\"primary\"\r\n                centered\r\n            >\r\n                <Tab icon={\r\n                    <AppsRoundedIcon />\r\n                } tabIndex={0} />\r\n                <Tab icon={<ForumRoundedIcon />} tabIndex={1} />\r\n                <Tab icon={<ExploreIcon />} tabIndex={2} />\r\n                <Tab icon={<GradeRoundedIcon />} tabIndex={3} />\r\n            </Tabs>\r\n        </Paper>\r\n    );\r\n}\r\n\r\n\r\n\r\nfunction UserMenu({ user }) {\r\n\r\n    const [checked, setChecked] = useState(false)\r\n\r\n\r\n    const handleLogout = async () => {\r\n\r\n        const loginId = Browser.getCookie(\"loginId\")\r\n        const userId = Browser.getCookie(\"userId\")\r\n\r\n        if (loginId == user.login_id && userId == user.user_id) {\r\n\r\n            console.log(loginId, userId)\r\n            Api.deleteLoginUser(loginId, userId).then(res => {\r\n                console.log(res.data)\r\n\r\n                Browser.setCookie(\"loginId\", \"\", -1)\r\n                Browser.setCookie(\"userId\", \"\", -1)\r\n\r\n                window.location.pathname = '/'\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    const handleClick = (event) => {\r\n        event.stopPropagation();\r\n        event.nativeEvent.stopImmediatePropagation(); \r\n        if (event.relatedTarget)\r\n            if (event.relatedTarget.classList.contains(\"ListItem1\"))\r\n                return;\r\n        console.log(event)\r\n        setChecked((prev) => !prev);\r\n    };\r\n\r\n\r\n\r\n    // const handleLink = (event) => {\r\n        // event.stopPropagation();\r\n        // event.nativeEvent.stopImmediatePropagation(); \r\n\r\n    //     let linkTo = event.target.id.split(\"-\")[1]\r\n    //     if (linkTo == \"profile\") {\r\n    //         linkTo += `/${user.username}`\r\n    //     }\r\n    //     console.log(linkTo)\r\n    //     history.push(`/${linkTo}`)\r\n    // }\r\n\r\n\r\n\r\n    // onBlur={handleClick}\r\n    return (\r\n        <div className=\"position-relative\">\r\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick} onBlur={handleClick}>\r\n                <div className=\"profileImg-sm\" style={{ backgroundImage: `url(${user.profileImg})` }} >\r\n                    <Slide direction=\"down\" className=\"custom-menu\" in={checked} mountOnEnter unmountOnExit>\r\n\r\n                        <div>\r\n                            <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n\r\n                                <Link className=\"d-block\" to={`/profile/${user.username}`} role=\"button\" button>\r\n                                    <ListItem className=\"ListItem1\" button>\r\n                                        <ListItemIcon>\r\n                                            <AccountCircleRoundedIcon style={{ fontSize: \"18px\" }} />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"Profile\" />\r\n                                    </ListItem>\r\n\r\n                                </Link>\r\n\r\n                                <Link className=\"d-block\" to={`/settings`} role=\"button\" button>\r\n                                    <ListItem className=\"ListItem1\" button>\r\n                                        <ListItemIcon>\r\n                                            <SettingsRoundedIcon style={{ fontSize: \"18px\" }} />\r\n                                        </ListItemIcon>\r\n                                        <ListItemText primary=\"Settings\" />\r\n                                    </ListItem>\r\n                                </Link>\r\n\r\n                                <ListItem className=\"ListItem1\" button onClick={handleLogout}>\r\n                                    <ListItemIcon>\r\n                                        <MeetingRoomRoundedIcon style={{ fontSize: \"18px\" }} />\r\n                                    </ListItemIcon>\r\n                                    <ListItemText primary=\"Logout\" />\r\n                                </ListItem>\r\n                            </List>\r\n                            <Divider />\r\n\r\n                        </div>\r\n                    </Slide>\r\n                </div>\r\n\r\n\r\n            </Button>\r\n\r\n            {/* <Zoom in={checked} className=\"custom-menu\"> */}\r\n\r\n            {/* </Zoom> */}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default function Navbar(props) {\r\n    // props : user, isUserLogin \r\n    const context = useContext(AuthContext)\r\n    // const location = useLocation()\r\n    // // const {} = useParams()\r\n\r\n    // const history = useHistory()\r\n    const [user, setUser] = useState({})\r\n    const [isUserLogin, setIsUserLogin] = useState(props.isUserLogin)\r\n    // const [path, setPath] = useState(Browser.getPathParam(window.location.pathname))\r\n    // const [navPath, setNavPath] = useState(Browser.getPathParam(window.location.pathname))\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        if (context.user) {\r\n            setUser(context.user)\r\n\r\n            setIsUserLogin(true)\r\n        }\r\n\r\n\r\n    }, [context])\r\n\r\n\r\n\r\n    // function BottomNavbar() {\r\n    //     return (\r\n    //         <div className=\"nav nav-pills nav-fill fixed-bottom border-top bg-light d-block\" style={{ boxShadow: \"0px -3px 19px #c9c9c9 !important\" }}>\r\n    //             <Nav></Nav>\r\n    //         </div>\r\n    //     )\r\n    // }\r\n\r\n\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {\r\n                isUserLogin && user && user._id ?\r\n                    <div className=\"nav nav-pills nav-fill fixed-bottom border-top bg-light d-block\" style={{ boxShadow: \"0px -3px 19px #c9c9c9 !important\" }}>\r\n                        <Nav></Nav>\r\n                    </div>\r\n                    :\r\n                    null\r\n            }\r\n            <nav className=\"navbar bg-blur-light navbar-expand border-bottom sticky-top p-0\" style={{ zIndex: 1021 }}>\r\n                <div className=\"container-fluid p-0\">\r\n                    <Link to=\"/\" style={{ fontFamily: 'Dancing Script, cursive', fontSize: '25px' }} className=\"btn btn-sm btn-light position-relative \" >lemetgram</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarTogglerDemo02\" aria-controls=\"navbarTogglerDemo02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\r\n                        <div className=\"navbar-nav m-auto d-none d-md-block\">\r\n                            <form className=\"input-group input-group-sm custom-form\" onSubmit={handleSubmit}>\r\n                                <span className=\"input-group-text grey lighten-1\" id=\"basic-addon1\"><SearchRoundedIcon /></span>\r\n                                <input className=\"form-control grey lighten-2\" id=\"search-input\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" aria-describedby=\"inputGroup-sizing-sm\"\r\n                                    onFocus={(e) => {\r\n                                        e.target.parentElement.classList.add(\"focus-animation\")\r\n                                    }}\r\n                                    onBlur={(e) => {\r\n                                        e.target.parentElement.classList.remove(\"focus-animation\")\r\n                                    }}\r\n                                />\r\n\r\n                            </form>\r\n                        </div>\r\n                        <div className='d-flex float-end'>\r\n                            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0 \">\r\n                                <li className=\"nav-item ms-5 position-relative\">\r\n                                    {\r\n                                        isUserLogin && user && user._id ?\r\n                                            <UserMenu user={user} />\r\n                                            :\r\n                                            <Link to=\"/login\" className=\"d-block\" style={{ textDecoration: \"unset\" }}>\r\n                                                <Btn>Login <LockOpenRoundedIcon /></Btn>\r\n                                            </Link>\r\n                                    }\r\n                                </li>\r\n                            </ul>\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </React.Fragment>\r\n\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\chat\\Chat.jsx",[],"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\Register.jsx",["221","222","223"],"\r\nimport React, { Component } from 'react'\r\n\r\nimport Navbar from \"../components/Navbar.jsx\"\r\nimport AsideBar from \"../components/AsideBar.jsx\"\r\nimport RegisterBody from \"../components/RegisterBody.jsx\"\r\n\r\n\r\n\r\nexport default function Register() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"d-flex flex-row justify-content-center h-100 position-relative\">\r\n                <div className=\"body-container mt-5\">\r\n                    <RegisterBody />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\context\\AuthReducer.js",[],"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\router\\Preview.js",["224","225","226"],"import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport PreviewPost from \"../pages/preview/PreviewPost.jsx\"\r\n\r\nexport default function CreateRouter() {\r\n    return (\r\n        <Route path=\"/preview/post/:id\" >\r\n            <PreviewPost />\r\n        </Route>\r\n\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\router\\Create.js",["227","228","229"],"import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport CreatePost from \"../pages/create/CreatePost.jsx\"\r\n\r\nexport default function CreateRouter() {\r\n    return (\r\n        <Route path=\"/create/post\" >\r\n            <CreatePost />\r\n        </Route>\r\n\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\router\\Chat.js",["230","231","232"],"import React from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Redirect,\r\n\r\n} from \"react-router-dom\";\r\n\r\nimport Chat from \"../pages/chat/Chat.jsx\"\r\n\r\nexport default function CreateRouter() {\r\n    return (\r\n        <React.Fragment>\r\n\r\n            <Route exact path=\"/chat/:conversationId\" >\r\n                <Chat />\r\n            </Route>\r\n            <Route exact path=\"/chat/\" >\r\n                <Chat />\r\n            </Route>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\functions\\Browser.js",["233","234","235","236"],"\r\nwindow.onclose = function () {\r\n    localStorage.removeItem(\"history\");\r\n    return '';\r\n};\r\n\r\nfunction setHistoryUrl() {\r\n    let url = window.location.href\r\n    let urlData = {}\r\n    let urlStore = []\r\n    if (window.localStorage.getItem(\"history\")) {\r\n        let createdAt = (JSON.parse(window.localStorage.getItem(\"history\")).createdAt - Date.now()) / 3600000\r\n        if (createdAt < 24) {\r\n            if (JSON.parse(window.localStorage.getItem(\"history\")).url)\r\n                urlStore = JSON.parse(window.localStorage.getItem(\"history\")).url\r\n                urlData.createdAt = JSON.parse(window.localStorage.getItem(\"history\")).createdAt\r\n        } else {\r\n            deleteHistoryUrl()\r\n        }\r\n\r\n    } else {\r\n        urlData.createdAt = Date.now()\r\n    }\r\n\r\n    urlStore.push(url)\r\n\r\n    urlData.url = urlStore\r\n\r\n    window.localStorage.setItem(\"history\", JSON.stringify(urlData))\r\n    return JSON.parse(window.localStorage.getItem(\"history\")).url\r\n}\r\n\r\nfunction deleteHistoryUrl() {\r\n    return window.localStorage.removeItem(\"history\")\r\n}\r\n\r\n\r\nfunction getHistoryUrl() {\r\n    return JSON.parse(window.localStorage.getItem(\"history\")).url\r\n}\r\n\r\nfunction getPathParam(url) {\r\n    let urlArray = url.split(\"/\")\r\n    let param = urlArray[1]\r\n    return param\r\n}\r\n\r\nconst chunkImgUrlData = (imgSrc) => {\r\n    if (imgSrc.startsWith(\"data\")) {\r\n\r\n        let dataUrl = imgSrc\r\n        console.log(dataUrl, dataUrl.length)\r\n\r\n        let chunkArray = []\r\n\r\n\r\n        let chunkEnd = 100000\r\n\r\n        let loopCount = (dataUrl.length / chunkEnd)\r\n\r\n        console.log(chunkEnd)\r\n\r\n        for (let i = 0; i < loopCount; i++) {\r\n            const chunk = dataUrl.slice((i * chunkEnd), ((i + 1) * chunkEnd));\r\n            chunkArray.push(chunk)\r\n        }\r\n\r\n        return chunkArray\r\n    } else {\r\n        return false\r\n    }\r\n}\r\n\r\n\r\nfunction getMinusTime(time) {\r\n    let seconds = Math.floor((new Date() - time) / 1000);\r\n    let hours = seconds / 3600\r\n    return hours\r\n}\r\n\r\nfunction resizeImage(base64Str, mime_type, quality = .7, maxWidth = 400, maxHeight = 350) {\r\n    return new Promise((resolve) => {\r\n        let img = new Image()\r\n        img.src = base64Str\r\n        img.onload = () => {\r\n            let canvas = document.createElement('canvas')\r\n            const MAX_WIDTH = maxWidth\r\n            const MAX_HEIGHT = maxHeight\r\n            let width = img.width\r\n            let height = img.height\r\n\r\n            if (width > height) {\r\n                if (width > MAX_WIDTH) {\r\n                    height *= MAX_WIDTH / width\r\n                    width = MAX_WIDTH\r\n                }\r\n            } else {\r\n                if (height > MAX_HEIGHT) {\r\n                    width *= MAX_HEIGHT / height\r\n                    height = MAX_HEIGHT\r\n                }\r\n            }\r\n            canvas.width = width\r\n            canvas.height = height\r\n            let ctx = canvas.getContext('2d')\r\n            ctx.drawImage(img, 0, 0, width, height)\r\n            resolve(canvas.toDataURL(mime_type, quality))\r\n        }\r\n    })\r\n}\r\n\r\n\r\nfunction setCookie(cname, cvalue, exdays = \"\") {\r\n    var d = new Date();\r\n    if (exdays !== \"\") {\r\n        d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);\r\n        var expires = \"expires=\" + d.toUTCString();\r\n    } else {\r\n        var expires = \"expires\";\r\n    }\r\n    try {\r\n        document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n    } catch (error) {\r\n        console.log('[-] ' + error);\r\n    }\r\n}\r\n\r\nfunction getCookie(cname) {\r\n    let name = cname + \"=\";\r\n    let decodedCookie = decodeURIComponent(document.cookie);\r\n    let ca = decodedCookie.split(';');\r\n    for (let i = 0; i < ca.length; i++) {\r\n        let c = ca[i];\r\n        while (c.charAt(0) == ' ') {\r\n            c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) == 0) {\r\n            return c.substring(name.length, c.length);\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport default {\r\n    setHistoryUrl,\r\n    getHistoryUrl,\r\n    setCookie,\r\n    getCookie,\r\n    getPathParam,\r\n    getMinusTime,\r\n    chunkImgUrlData,\r\n    resizeImage\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\functions\\Api.js",["237","238","239","240","241","242","243","244","245"],"import axios from \"axios\"\r\nimport url_join from \"url-join\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nimport constants from \"../constant/general\";\r\n\r\nconst { proxy, UPLOAD_POST_URL, UPLOAD_USER_URL, ALLOWED_IMG, ALLOWED_IMG_SIZE } = constants\r\n// const proxy = \"http:/localhost:8800/api\"\r\n\r\n// const UPLOAD_USER_URL = process.env.REACT_APP_UPLOAD_USER_URL\r\n// const UPLOAD_POST_URL = process.env.REACT_APP_UPLOAD_POST_URL\r\n\r\n\r\n// const ALLOWED_IMG = [\"image/png\", \"image/jpeg\"]\r\n// const ALLOWED_IMG_SIZE = 8\r\n\r\n\r\nfunction addPathToMedia(obj, type) {\r\n    // if (type == \"post\" && obj._id && obj.img && obj.img != \"\") {\r\n    //     // obj.img = url_join(public_posts_url, obj.img)\r\n    // } else if (type == \"post\" && obj._id && obj.img == \"\") {\r\n    //     obj.img = url_join(public_default_url, \"post.jpg\")\r\n    // }\r\n\r\n    // if (type == \"user\" && obj._id && obj.profileImg && obj.profileImg != \"\") {\r\n    //     // obj.profileImg = url_join(public_users_url, obj._id, obj.img)\r\n    // } else if (type == \"user\" && obj._id && obj.profileImg == \"\") {\r\n    //     obj.profileImg = url_join(public_default_url, \"profile.jpg\")\r\n    // }\r\n    // if (type == \"user\" && obj._id && obj.coverImg && obj.coverImg != \"\") {\r\n    //     // obj.coverImg = url_join(public_users_url, obj._id, obj.coverImg)\r\n\r\n    // } else if (type == \"user\" && obj._id && obj.coverImg == \"\") {\r\n\r\n    //     obj.coverImg = url_join(public_default_url, \"cover.jpg\")\r\n    // }\r\n\r\n\r\n    return obj\r\n}\r\n\r\nfunction reverseResArray(obj) {\r\n\r\n    if (Array.isArray(obj)) {\r\n        obj = obj.reverse()\r\n    }\r\n\r\n    return obj\r\n}\r\n\r\n// ! AUTH API :\r\nconst registerUser = async (userData) => {\r\n    return await axios.post(`${proxy}/auth/register`, userData)\r\n}\r\n\r\nconst loginUser = async ({ userEmail, userPassword }) => {\r\n    const res = await axios.post(`${proxy}/auth/login`, { email: userEmail, password: userPassword })\r\n    res.data = addPathToMedia(res.data, \"user\")\r\n    return res\r\n}\r\n\r\n\r\nconst saveLoginUser = async ({ userEmail, userPassword }) => {\r\n    const res = await axios.post(`${proxy}/auth/save_login`, { email: userEmail, password: userPassword })\r\n    res.data._id = res.data.user_id\r\n    return res\r\n}\r\n\r\n\r\n\r\nconst fetchSaveLoginUser = async (loginId, userId) => {\r\n\r\n    const res = await axios.post(`${proxy}/auth/auto_login`, { loginId: loginId, userId: userId })\r\n    // res.data.session_id = res.data._id\r\n    res.data._id = userId\r\n    return res\r\n\r\n}\r\n\r\n\r\n\r\nconst deleteLoginUser = async (loginId, userId) => {\r\n\r\n    const res = await axios.delete(`${proxy}/auth/delete_login`, { params: { loginId: loginId, userId: userId } })\r\n    // res.data.session_id = res.data._id\r\n    return res\r\n\r\n}\r\n\r\n\r\nconst updateLoginUser = async (loginId, userId) => {\r\n\r\n    const res = await axios.put(`${proxy}/auth/update_login`, { loginId: loginId, userId: userId })\r\n    // res.data.session_id = res.data._id\r\n    res.data._id = userId\r\n    return res\r\n\r\n}\r\n\r\n\r\n\r\n// ! USER API : \r\nconst updateUser = async (id, _userId, updateData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n\r\n    return await axios.put(`${proxy}/users/${id}`, { userId: _userId, ..._updateData })\r\n\r\n}\r\n\r\nconst updateUserImg = async (id, _userId, updateData, formData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n\r\n    // const files = formData.get(\"file\")\r\n    const coverImg = formData.get(\"coverImg\")\r\n    const profileImg = formData.get(\"profileImg\")\r\n    const files = [profileImg, coverImg]\r\n    console.log(files)\r\n    files.forEach(file => {\r\n        const newFormData = new FormData()\r\n        newFormData.append(\"file\", file)\r\n\r\n        if (file) {\r\n            console.log(file)\r\n            const fileSize = file.size / 1000 / 1000\r\n\r\n            if (fileSize < ALLOWED_IMG_SIZE && ALLOWED_IMG.includes(file.type)) {\r\n                const fileMimeType = file.type.split(\"/\")[1]\r\n                const fileName = `${uuidv4()}.${fileMimeType}`\r\n\r\n                const filePath = url_join(UPLOAD_USER_URL, _userId, fileName)\r\n                console.log(filePath)\r\n\r\n                // postData.img = filePath\r\n                _updateData[file.id] = filePath\r\n\r\n                uploadUserImage(fileName, _userId, newFormData).then(async res => {\r\n                    console.log(res)\r\n                    if (res.status == 200)\r\n                        return await axios.put(`${proxy}/users/${id}/set_img`, { userId: _userId, ..._updateData })\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nconst deleteUser = async (id, userId) => {\r\n    return await axios.delete(`${proxy}/users/${id}`, { params: { userId: userId } })\r\n}\r\n\r\nconst fetchUser = async (id_user, type = \"id\") => {\r\n    const res = await axios.get(`${proxy}/users/${id_user}/${type}`)\r\n    res.data = addPathToMedia(res.data, \"user\")\r\n    return res\r\n}\r\n\r\n\r\nconst followUser = async (id, userId) => {\r\n    return await axios.put(`${proxy}/users/${id}/follow`, { userId: userId })\r\n}\r\n\r\n\r\nconst unfollowUser = async (id, userId) => {\r\n    return await axios.put(`${proxy}/users/${id}/unfollow`, { userId: userId })\r\n}\r\n\r\nconst fetchAllUsers = async () => {\r\n    const res = await axios.get(`${proxy}/users/get_all_users`)\r\n    // res.data = reverseResArray(res.data)\r\n    // res.data.map(resData => {\r\n    //     resData = addPathToMedia(resData, \"user\")\r\n    // })\r\n    return res\r\n}\r\n\r\n\r\n// ! POST API :\r\nconst createPost = async (postData, formData) => {\r\n    const file = formData.get(\"file\")\r\n    console.log(postData, file)\r\n    if (file) {\r\n        const fileSize = file.size / 1000 / 1000\r\n\r\n        if (fileSize < ALLOWED_IMG_SIZE && ALLOWED_IMG.includes(file.type)) {\r\n            const fileMimeType = file.type.split(\"/\")[1]\r\n            const fileName = `${uuidv4()}.${fileMimeType}`\r\n\r\n            const filePath = url_join(UPLOAD_POST_URL, postData.userId, \"images\", fileName)\r\n\r\n            postData.img = filePath\r\n\r\n            await uploadPostImage(fileName, postData.userId, formData).then(async res => {\r\n                console.log(res)\r\n                if (res.status == 200)\r\n                    return await axios.post(`${proxy}/posts/`, postData)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst updatePost = async (id, _userId, updateData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n    return await axios.put(`${proxy}/posts/${id}`, { userId: _userId, ..._updateData })\r\n}\r\n\r\nconst updatePostImg = async (id, _userId, updateData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n    return await axios.put(`${proxy}/posts/${id}/set_img`, { userId: _userId, ..._updateData })\r\n}\r\n\r\nconst deletePost = async (id, userId) => {\r\n    return await axios.delete(`${proxy}/posts/${id}`, { params: { userId: userId } })\r\n}\r\n\r\n\r\nconst likePost = async (id, userId) => {\r\n    return await axios.put(`${proxy}/posts/${id}/like`, { userId: userId })\r\n}\r\n\r\n\r\nconst fetchPost = async (id) => {\r\n    const res = await axios.get(`${proxy}/posts/${id}`)\r\n    res.data = addPathToMedia(res.data, \"post\")\r\n    return res\r\n}\r\n\r\n\r\nconst fetchUserPosts = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/user/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\n\r\nconst fetchUserPostsId = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/user_posts_id/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\nconst fetchFuserPosts = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/fuser/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\nconst fetchFuserPostsId = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/fuser_posts_id/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\n\r\nconst fetchAllPosts = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/all/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\nconst fetchAllPostsId = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/all_posts_id/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\n\r\n// ! UPLOAD :\r\n\r\nconst uploadPostImage = async (filename, userId, formData) => {\r\n    return await axios.post(`${proxy}/upload/post/${userId}/${filename}`, formData)\r\n}\r\n\r\nconst uploadUserImage = async (filename, userId, formData) => {\r\n    return await axios.post(`${proxy}/upload/user/${userId}/${filename}`, formData)\r\n}\r\n\r\n\r\n// ! CONVERSATION :\r\nconst createConversation = async (senderId, receiverId) => {\r\n    const res = await axios.post(`${proxy}/conversation`, { senderId: senderId, receiverId: receiverId })\r\n    return res\r\n}\r\n\r\nconst getConversation = async (currentUser, secondUser) => {\r\n    const res = await axios.get(`${proxy}/conversation/${currentUser}/${secondUser}`)\r\n    return res\r\n}\r\n\r\n\r\nconst getConversationByid = async (conversationId, currentUser) => {\r\n    const res = await axios.post(`${proxy}/conversation/conv/${conversationId}`, { currentUser: currentUser })\r\n    return res\r\n}\r\n\r\nconst getUserConversations = async (userId) => {\r\n    const res = await axios.get(`${proxy}/conversation/user/${userId}`)\r\n    return res\r\n}\r\n\r\n// ! MESSAGE :\r\nconst createMessage = async (conversationId, senderId, text) => {\r\n    const res = await axios.post(`${proxy}/message`, { conversationId: conversationId, senderId: senderId, text: text })\r\n    return res\r\n}\r\n\r\nconst getConversationMessages = async (conversationId, currentUser, secondUser) => {\r\n    const res = await axios.post(`${proxy}/message/${conversationId}`, { currentUser: currentUser, secondUser: secondUser })\r\n    return res\r\n}\r\n\r\n\r\nexport default {\r\n    registerUser,\r\n    loginUser,\r\n    saveLoginUser,\r\n    fetchSaveLoginUser,\r\n    deleteLoginUser,\r\n    updateLoginUser,\r\n\r\n    updateUser,\r\n    updateUserImg,\r\n    deleteUser,\r\n    followUser,\r\n    unfollowUser,\r\n\r\n    fetchUser,\r\n    fetchAllUsers,\r\n\r\n    createPost,\r\n    updatePost,\r\n    updatePostImg,\r\n    deletePost,\r\n    likePost,\r\n\r\n    fetchPost,\r\n    fetchUserPosts,\r\n    fetchFuserPosts,\r\n    fetchAllPosts,\r\n    fetchUserPostsId,\r\n    fetchFuserPostsId,\r\n    fetchAllPostsId,\r\n\r\n    uploadPostImage,\r\n    uploadUserImage,\r\n\r\n    createConversation,\r\n    getConversation,\r\n    getConversationByid,\r\n    getUserConversations,\r\n\r\n    createMessage,\r\n    getConversationMessages,\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\Body.jsx",["246","247","248","249","250","251","252","253"],"import React, { Component, useEffect, useState, useContext } from 'react';\r\n\r\nimport SahreBar from \"./SahreBar.jsx\"\r\nimport Post from \"./Post.jsx\"\r\n\r\n\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\n\r\n\r\nimport axios from \"axios\"\r\nimport Api from \"../functions/Api\"\r\nimport { AuthContext } from '../context/AuthContext.js';\r\n\r\n\r\n\r\nexport default function Body() {\r\n\r\n    const context = useContext(AuthContext)\r\n\r\n    const [user, setUser] = useState(context.user)\r\n    const [posts, setPosts] = useState([])\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [isFinishing, setIsFinishing] = useState(false)\r\n\r\n\r\n\r\n    const fetchPosts = async () => {\r\n        setIsFetching(true)\r\n        await Api.fetchAllPostsId(context.user._id).then(res => {\r\n            console.log(res.data)\r\n            setPosts(res.data)\r\n            setIsFetching(false)\r\n        })\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setIsFetching(false)\r\n        fetchPosts()\r\n        // fetchUser()\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"body-container\">\r\n            <SahreBar />\r\n\r\n            <div className=\"\">\r\n                <div className=\"mb-4\">\r\n                    {\r\n                        isFetching ?\r\n                            <LinearProgress />\r\n                            :\r\n                            <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>\r\n                    }\r\n                </div>\r\n                {\r\n                    posts.map(post => {\r\n                        console.log(post._id)\r\n                        return <Post key={post._id} postId={post._id} />\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n// export default class Body extends Component {\r\n\r\n//     // props : userId\r\n\r\n//     constructor(props) {\r\n//         super(props)\r\n//     }\r\n\r\n//     state = {\r\n//         posts: [],\r\n//         user: {}\r\n//     }\r\n\r\n\r\n\r\n//     fetchUser = async () => {\r\n//         await Api.fetchUser(this.props.userId).then(res => {\r\n//             this.setState({ user: res.data })\r\n//         })\r\n//     }\r\n\r\n\r\n//     fetchPosts = async () => {\r\n\r\n//         await Api.fetchAllPosts(this.props.userId).then(res => {\r\n//             this.setState({ posts: res.data })\r\n//         })\r\n\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.fetchPosts()\r\n//         this.fetchUser()\r\n//     }\r\n\r\n//     // componentDidUpdate(prevProps, prevState) {}\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"body-container\">\r\n//                 <SahreBar user={this.state.user} />\r\n\r\n//                 <div className=\"\">\r\n//                     {\r\n//                         this.state.posts.map(post => {\r\n//                             return <Post key={post._id} post={post} userId={this.props.userId} />\r\n//                         })\r\n//                     }\r\n\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\AsideBar.jsx",["254","255","256","257","258","259"],"import React, { Component, useState, useEffect, useContext } from 'react';\r\nimport {\r\n    Link,\r\n    useParams,\r\n    useHistory\r\n\r\n} from 'react-router-dom';\r\n\r\n\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nimport Api from '../functions/Api';\r\n\r\n\r\n\r\nexport default function AsideBar() {\r\n\r\n    const context = useContext(AuthContext)\r\n\r\n    const [friends, setFriends] = useState([])\r\n\r\n\r\n    function UserDev({ user }) {\r\n\r\n        let isConnected = false;\r\n        console.log(context.usersIsConnected)\r\n        if (context.usersIsConnected.some(u => u.userId == user._id))\r\n            isConnected = true;\r\n        console.log(isConnected);\r\n\r\n        return (\r\n            <Link to={`/profile/${user.username}`} class=\"btn btn-light d-flex align-items-center position-relative mt-2\">\r\n\r\n                <div className=\"profileImg\" style={{ backgroundImage: `url(${user.profileImg})` }}></div>\r\n                <span className=\"username position-relative\" href=\"#\">\r\n                    {user.username}\r\n                </span>\r\n\r\n                {\r\n                    function () {\r\n                        if (isConnected == true) {\r\n                            return (\r\n                                <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-success rounded-circle\">\r\n                                    <span className=\"visually-hidden\">New alerts</span>\r\n                                </span>\r\n                            )\r\n                        }\r\n                    }()\r\n                }\r\n\r\n            </Link>\r\n        )\r\n    }\r\n\r\n\r\n    const fetchUserFriends = async () => {\r\n        let friendsAv = Array.from(friends)\r\n        console.log(friendsAv)\r\n        await Promise.all(context.user.followings.map(async userId => {\r\n            await Api.fetchUser(userId).then(res => {\r\n                console.log(res.data)\r\n                friendsAv.push(res.data)\r\n            })\r\n        }))\r\n        setFriends(friendsAv)\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchUserFriends()\r\n\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div className=\"h-md-100  rigth-side position-relative\" style={{}}>\r\n            <aside className=\"bd-sidebar sticky-top \">\r\n                <nav className=\"navbar navbar-expand-md navbar-light bg-light bd-users_nav shadow\" style={{ borderRadius: \"1.25rem\" }}>\r\n                    <div className=\"p-3\">\r\n                        <button className=\"navbar-toggler ms-3\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarTogglerDemo04\" aria-controls=\"navbarTogglerDemo04\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                            <span className=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div className=\"p-3 collapse navbar-collapse flex-md-wrap\" id=\"navbarTogglerDemo04\">\r\n                            <div className=\"mb-3\">\r\n                                <p className=\"fw-bold\">Online Friends</p>\r\n                                {\r\n                                    friends.map(user => {\r\n                                        return <UserDev user={user} key={user._id} />\r\n                                    })\r\n                                }\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <p className=\"fw-bold\">Suggestions For You</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </aside>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n// class AsideBar extends Component {\r\n//     // props : userId\r\n//     state = {\r\n//         user: {}\r\n//     }\r\n\r\n//     UserDev({ user, userStatus }) {\r\n//         return (\r\n//             <a href={`profile/${user.username}`} type=\"button\" className=\"btn btn-sm btn-light d-block position-relative mt-2\">\r\n//                 <img className=\"profileImg\" src={user.profileImg} alt=\"\" />\r\n//                 <span className=\"username position-relative\" href=\"#\">\r\n//                     {user.username}\r\n//                 </span>\r\n\r\n//                 {\r\n//                     function () {\r\n//                         if (userStatus == \"true\") {\r\n//                             return (\r\n//                                 <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-success rounded-circle\">\r\n//                                     <span className=\"visually-hidden\">New alerts</span>\r\n//                                 </span>\r\n//                             )\r\n//                         }\r\n//                     }()\r\n//                 }\r\n\r\n//             </a>\r\n//         )\r\n//     }\r\n\r\n\r\n\r\n//     fetchUser = async () => {\r\n//         await Api.fetchUser(this.props.userId).then(res => {\r\n//             this.setState({ user: res.data })\r\n//         })\r\n//     }\r\n\r\n\r\n\r\n//     componentDidMount() {\r\n//         this.fetchUser()\r\n\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"h-md-100  rigth-side position-relative\" style={{}}>\r\n//                 <aside className=\"bd-sidebar sticky-top\">\r\n//                     <nav className=\"navbar navbar-expand-md navbar-light bg-light bd-users_nav\">\r\n//                         <div className=\"\">\r\n//                             <button className=\"navbar-toggler ms-3\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarTogglerDemo04\" aria-controls=\"navbarTogglerDemo04\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n//                                 <span className=\"navbar-toggler-icon\"></span>\r\n//                             </button>\r\n//                             <div className=\"p-3 collapse navbar-collapse flex-md-wrap\" id=\"navbarTogglerDemo04\">\r\n//                                 <div className=\"mb-3\">\r\n//                                     <p className=\"fw-bold\">Online Friends</p>\r\n//                                     {\r\n//                                         <this.UserDev user={this.state.user} key={this.state.user.id} userStatus=\"true\" />\r\n//                                     }\r\n//                                 </div>\r\n//                                 <div className=\"\">\r\n//                                     <p className=\"fw-bold\">Suggestions For You</p>\r\n//                                 </div>\r\n//                             </div>\r\n//                         </div>\r\n//                     </nav>\r\n//                 </aside>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n// export default AsideBar\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\ProfileBody.jsx",["260","261","262","263","264","265","266","267","268","269","270"],"import React, { Component, useState, useContext, useEffect } from 'react'\r\nimport SharBer from \"./SahreBar.jsx\"\r\n\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport RemoveRoundedIcon from '@material-ui/icons/RemoveRounded';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\n\r\nimport Api from '../functions/Api.js';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/AuthContext.js';\r\nimport { updateLoginApiContext } from \"../ApiContext\"\r\n\r\nexport default function ProfileBody(props) {\r\n    // props: user\r\n    const context = useContext(AuthContext)\r\n\r\n    const [isFollowing, setIsFollowing] = useState(false)\r\n    const [user, setUser] = useState(props.user)\r\n    const [followers, setFollowers] = useState(0)\r\n    const [followings, setFollowings] = useState(0)\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n\r\n\r\n    useEffect(() => {\r\n        updateLoginApiContext(context.dispatch)\r\n    }, [user, isFollowing, followers, followings])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        setUser(props.user)\r\n        setIsFetching(false)\r\n        // console.log(props.user, props.user.id, Boolean(props.user.id))\r\n        if (props.user._id) {\r\n            setIsFetching(false)\r\n        } else {\r\n            setIsFetching(true)\r\n        }\r\n\r\n        setFollowers(props.user?.followers?.length)\r\n        setFollowings(props.user?.followings?.length)\r\n\r\n        setIsFollowing(props.user?.followers?.includes(context.user._id))\r\n\r\n    }, [props.user])\r\n\r\n\r\n    function followButton() {\r\n        if (user._id && context.user._id && user._id != context.user._id) {\r\n            if (isFollowing) {\r\n                return <button className=\"btn btn-secondary\" onClick={() => handleFollow()}>Unfollow <RemoveRoundedIcon /></button>\r\n            } else {\r\n                return <button className=\"btn btn-primary\" onClick={() => handleFollow()}>Follow <AddRoundedIcon /></button>\r\n            }\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n    const unfollowUser = async () => {\r\n        const res = await Api.unfollowUser(user._id, context.user._id)\r\n        return res.status\r\n    }\r\n\r\n\r\n    const followUser = async () => {\r\n        const res = await Api.followUser(user._id, context.user._id)\r\n        return res.status\r\n    }\r\n\r\n\r\n\r\n    const handleFollow = async () => {\r\n        if (user._id != context.user._id) {\r\n            if (isFollowing) {\r\n                const resStatus = await unfollowUser()\r\n                if (resStatus == 200) {\r\n\r\n                    user.followers = user.followers.filter(e => {\r\n                        return e != context.user._id\r\n                    })\r\n\r\n                    setUser(prevState => ({\r\n                        ...prevState,\r\n                        followers: user.followers\r\n                    }))\r\n\r\n                    setIsFollowing(false)\r\n                }\r\n            } else {\r\n                const resStatus = await followUser()\r\n                if (resStatus == 200) {\r\n\r\n                    let newFollowers = user.followers.push(context.user._id)\r\n\r\n\r\n                    setUser(prevState => ({\r\n                        ...prevState,\r\n                        followers: newFollowers\r\n                    }))\r\n\r\n                    setIsFollowing(true)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card text-center mb-5 custom-card\">\r\n                <div className=\"card-body \">\r\n                    <h5 className=\"card-title mb-3\">\r\n                    </h5>\r\n                    <div className=\"position-relative\">\r\n                        <div style={{ backgroundImage: (!user.coverImg ? `` : `url(${user.coverImg})`) }} className={`card-img-top coverImg-center ${user.coverImg ? `loadImg` : `isLoading`}`}>\r\n                            {/* {isFetching ? <CircularProgress /> : null} */}\r\n                        </div>\r\n                        <div style={{ backgroundImage: (!user.profileImg ? `` : `url(${user.profileImg})`) }} className={`profileImg-center shadow-lg p-1 bg-body rounded-circle ${user.profileImg ? `loadImg` : `isLoading`}`}>\r\n                            {/* {isFetching ? <CircularProgress /> : null} */}\r\n                        </div>\r\n                        <div className=\"username-profile-div shadow-lg bg-body\">\r\n                            <span className=\"username-profile-span\"><AccountCircleRoundedIcon /></span>\r\n                            <span className=\"username-profile\">{user?.username}</span>\r\n                        </div>\r\n                    </div>\r\n                    <ul className=\"list-group mb-3 mt-3 position-relative\">\r\n                        {\r\n                            isFetching ?\r\n                                <div className=\" position-absolute top-0 start-0 bg-light w-100 h-100 d-flex justify-content-center flex-column\" style={{ zIndex: 10 }}>\r\n                                    <CircularProgress className=\"m-auto\" />\r\n                                </div> :\r\n                                null\r\n                        }\r\n                        <li className=\"list-group-item\">Name : {user?.name}</li>\r\n                        <li className=\"list-group-item\">discrption : {user?.desc}</li>\r\n                        <li className=\"list-group-item\">Followers : <span className=\"badge bg-warning text-dark\">{followers}</span></li>\r\n                        <li className=\"list-group-item\">Following : <span className=\"badge bg-danger text-dark\">{followings}</span></li>\r\n                        <li className=\"list-group-item\">From : <span className=\"badge text-dark\">{user?.from}</span></li>\r\n                        <li className=\"list-group-item\">City : <span className=\"badge text-dark\">{user?.city}</span></li>\r\n                        <li className=\"list-group-item\">Email : <span className=\"badge text-dark\">{user?.email}</span></li>\r\n                    </ul>\r\n                    {followButton()}\r\n                </div>\r\n            </div>\r\n            {context.user._id == user._id ? <SharBer user={user} /> : \"\"}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n// export default class ProfileBody extends Component {\r\n\r\n//     // props : userId\r\n//     constructor(props) {\r\n//         super(props)\r\n//     }\r\n\r\n//     state = {\r\n//         isFollowing: false,\r\n//         user: this.props.user,\r\n//         followers: 0,\r\n//         followings: 0\r\n//     }\r\n\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         if (prevProps.user !== this.state.user) {\r\n//             this.setState({ user: this.props.user })\r\n\r\n//             this.setState({ followers: this.props.user?.followers?.length })\r\n//             this.setState({ followings: this.props.user?.followings?.length })\r\n\r\n//             this.setState({ isFollowing: this.props.user?.followers?.includes(this.props.userId) })\r\n\r\n//         }\r\n//         // if (prevProps.isLike !== this.state.isLike) {\r\n//         //     console.log(prevProps, prevState)\r\n//         // }\r\n//     }\r\n\r\n\r\n\r\n//     followButton() {\r\n//         if (this.state.user._id != this.props.userId) {\r\n//             if (this.state.isFollowing) {\r\n//                 return <button className=\"btn btn-secondary\" onClick={() => this.handleFollow()}>Unfollow <RemoveRoundedIcon /></button>\r\n//             } else {\r\n//                 return <button className=\"btn btn-primary\" onClick={() => this.handleFollow()}>Follow <AddRoundedIcon /></button>\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     unfollowUser = async () => {\r\n//         const res = await Api.unfollowUser(this.state.user._id, this.props.userId)\r\n//         return res.status\r\n//     }\r\n\r\n\r\n//     followUser = async () => {\r\n//         const res = await Api.followUser(this.state.user._id, this.props.userId)\r\n//         return res.status\r\n//     }\r\n\r\n\r\n\r\n//     handleFollow = async () => {\r\n//         if (this.state.user._id != this.userId) {\r\n//             if (this.state.isFollowing) {\r\n//                 const resStatus = await this.unfollowUser()\r\n//                 if (resStatus == 200) {\r\n\r\n//                     this.state.user.followers = this.state.user.followers.filter(e => {\r\n//                         return e != this.props.userId\r\n//                     })\r\n\r\n//                     this.setState(prevState => ({\r\n//                         user: {\r\n//                             ...prevState.user,\r\n//                             followers: this.state.user.followers\r\n//                         }\r\n//                     }))\r\n\r\n//                     this.setState({ isFollowing: false })\r\n//                 }\r\n//             } else {\r\n//                 const resStatus = await this.followUser()\r\n//                 if (resStatus == 200) {\r\n\r\n//                     let newFollowers = this.state.user.followers.push(this.props.userId)\r\n\r\n//                     this.setState(prevState => ({\r\n//                         user: {\r\n//                             ...prevState.user,\r\n//                             followers: newFollowers\r\n//                         }\r\n//                     }))\r\n\r\n//                     this.setState({ isFollowing: true })\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n\r\n\r\n\r\n//     render() {\r\n\r\n\r\n//         return (\r\n//             <React.Fragment>\r\n//                 <div className=\"card text-center mb-4\">\r\n//                     <div className=\"card-body \">\r\n//                         <h5 className=\"card-title mb-3\">\r\n//                         </h5>\r\n//                         <div className=\"position-relative\">\r\n//                             <img src={this.state.user?.coverImg} className=\"card-img-top coverImg-center\" alt=\"\" />\r\n//                             <img src={this.state.user?.profileImg} className=\"profileImg-center shadow-lg p-3 mb-5 bg-body rounded-circle\" alt=\"\" />\r\n//                             <div className=\"username-profile-div shadow-lg bg-body\">\r\n//                                 <span className=\"username-profile-span\"><AccountCircleRoundedIcon /></span>\r\n//                                 <span className=\"username-profile\">{this.state.user?.username}</span>\r\n//                             </div>\r\n//                         </div>\r\n//                         <ul className=\"list-group mb-3 mt-3\">\r\n//                             <li className=\"list-group-item\">Name : {this.state.user?.name}</li>\r\n//                             <li className=\"list-group-item\">discrption : {this.state.user?.desc}</li>\r\n//                             <li className=\"list-group-item\">Followers : <span className=\"badge bg-warning text-dark\">{this.state.followers}</span></li>\r\n//                             <li className=\"list-group-item\">Following : <span className=\"badge bg-danger text-dark\">{this.state.followings}</span></li>\r\n//                             <li className=\"list-group-item\">From : <span className=\"badge text-dark\">{this.state.user?.from}</span></li>\r\n//                             <li className=\"list-group-item\">City : <span className=\"badge text-dark\">{this.state.user?.city}</span></li>\r\n//                             <li className=\"list-group-item\">Email : <span className=\"badge text-dark\">{this.state.user?.email}</span></li>\r\n//                         </ul>\r\n//                         {this.followButton()}\r\n//                     </div>\r\n//                 </div>\r\n//                 <SharBer user={this.state.user} />\r\n//                 <Link to=\"/profile/test3\">test3</Link>\r\n//             </React.Fragment>\r\n//         )\r\n//     }\r\n// }\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\LoginBody.jsx",["271","272","273","274","275","276","277","278","279"],"import React, { Component, useEffect, useState, useContext, useRef } from 'react'\r\n\r\nimport {\r\n    Redirect,\r\n    Route,\r\n    Link,\r\n    useHistory\r\n\r\n} from 'react-router-dom';\r\n\r\nimport Api from '../functions/Api';\r\n\r\n// context \r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { loginApiContext, autoLoginApiContext } from '../ApiContext';\r\n\r\n// material \r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LockOpenRoundedIcon from '@material-ui/icons/LockOpenRounded';\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Browser from '../functions/Browser';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: 1000000000000,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\n\r\nexport default function LoginBody() {\r\n    const context = useContext(AuthContext)\r\n    const history = useHistory()\r\n\r\n    const inputEmail = useRef()\r\n    const inputPassword = useRef()\r\n\r\n    const classes = useStyles();\r\n    const [openBackdrop, setOpenBackdrop] = React.useState(false);\r\n\r\n    useEffect(async () => {\r\n\r\n        // await autoLoginApiContext(context.dispatch)\r\n\r\n            // console.log(res)\r\n            // let lastUrlVistedArray = Browser.getHistoryUrl()\r\n            // console.log(lastUrlVistedArray)\r\n            // let lastUrlVisted = lastUrlVistedArray[lastUrlVistedArray.length - 1]\r\n            // console.log(lastUrlVisted, window.location.href, lastUrlVisted != window.location.href)\r\n\r\n            // history.go(\"http://localhost:3000/profile/test2\")\r\n            // if (lastUrlVisted != window.location.href) {\r\n\r\n            //     history.go(lastUrlVisted)\r\n            // } \r\n            // else {\r\n            //     history.go(window.location.host)\r\n            // }\r\n\r\n\r\n    }, [])\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n\r\n        setOpenBackdrop(true);\r\n\r\n        let userCredentials = {\r\n            userEmail: inputEmail.current.value,\r\n            userPassword: inputPassword.current.value\r\n        }\r\n\r\n        const res = await loginApiContext(userCredentials, context.dispatch)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            {\r\n                context.isFetching ?\r\n                    <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                        <CircularProgress color=\"light\" />\r\n                    </Backdrop>\r\n                    :\r\n                    openBackdrop ? setOpenBackdrop(false) : null\r\n                // setOpen(false)\r\n            }\r\n            {\r\n                context.user ? <Redirect exact to=\"/\" /> : <Redirect to=\"/login\" />\r\n            }\r\n            <div className=\"card text-center m-auto custom-card\" style={{ maxWidth: \"500px\" }}>\r\n                <div className=\"card-header\">\r\n                    LOGIN\r\n                </div>\r\n                {context.isFetching ? <LinearProgress /> : <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>}\r\n                <div className=\"card-body\">\r\n                    <form className=\"row g-4\" onSubmit={handleSubmit}>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"inputEmail\" className=\"form-label\">Email</label>\r\n                            <input type=\"email\" className=\"form-control\" id=\"inputEmail\" placeholder=\"Email\" required ref={inputEmail} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label htmlFor=\"inputPassword\" className=\"form-label\">Password</label>\r\n                            <input type=\"password\" className=\"form-control\" id=\"inputPassword\" minLength=\"6\" placeholder=\"Password\" required ref={inputPassword} />\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <button type=\"submit\" className=\"btn btn-primary text-center position-relative\">\r\n                                <div>\r\n\r\n                                    {context.isFetching ? \"Loading\" : \"Login\"}\r\n\r\n                                    {\r\n                                        context.isFetching ?\r\n                                            <CircularProgress disableShrink color=\"white\" size=\"20px\" className=\"ms-1\" thickness={5} style={{ marginBottom: \"-5px\" }} />\r\n                                            :\r\n                                            <LockOpenRoundedIcon className=\"ms-1\" />\r\n                                    }\r\n                                </div>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div className=\"card-footer text-muted\">\r\n\r\n                    I don't have an account - <Link to=\"/register\">register </Link>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n// export default class LoginBody extends Component {\r\n\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.handleSubmit = this.handleSubmit.bind(this);\r\n//     }\r\n//     state = {\r\n//         inputEmail: \"\",\r\n//         inputPassword: \"\"\r\n//     }\r\n\r\n//     handleChange(event, stateStr) {\r\n//         this.setState({ [stateStr]: event.target.value });\r\n//     }\r\n\r\n//     loginUser = async (userEmail, userPassword) => {\r\n//         return await Api.loginUser(userEmail, userPassword)\r\n//     }\r\n\r\n//     handleSubmit = async (event) => {\r\n//         event.preventDefault();\r\n//         const res = await this.loginUser(this.state.inputEmail, this.state.inputPassword)\r\n//         if (res.status == 200) {\r\n//             console.log(\"login seccssufly !!!!\")\r\n//             const [setUser, setAuth] = this.context.setContext\r\n//             setUser(res.data)\r\n\r\n//             if (this.context.state.user) {\r\n//                 setAuth(true)\r\n//             }\r\n\r\n//         }\r\n//     }\r\n\r\n\r\n//     componentDidMount() {\r\n//         console.log(this.context, this.context.state.user)\r\n//     }\r\n\r\n//     render() {\r\n//         return (\r\n//             <React.Fragment>\r\n//                 {\r\n//                     this.context.state.isAuthenticated ? <Redirect exact to=\"/\" /> : <Redirect to=\"/login\" />\r\n//                 }\r\n//                 <div className=\"card text-center m-auto\" style={{ maxWidth: \"500px\" }}>\r\n//                     <div className=\"card-header\">\r\n//                         REGISTER\r\n//                     </div>\r\n//                     <div className=\"card-body\">\r\n//                         <form className=\"row g-4\" onSubmit={this.handleSubmit}>\r\n//                             <div className=\"col-md-6\">\r\n//                                 <label for=\"inputEmail\" className=\"form-label\">Email</label>\r\n//                                 <input type=\"email\" className=\"form-control\" id=\"inputEmail\" placeholder=\"Email\" onChange={(e) => this.handleChange(e, \"inputEmail\")} />\r\n//                             </div>\r\n//                             <div className=\"col-md-6\">\r\n//                                 <label for=\"inputPassword\" className=\"form-label\">Password</label>\r\n//                                 <input type=\"password\" className=\"form-control\" id=\"inputPassword\" placeholder=\"Password\" onChange={(e) => this.handleChange(e, \"inputPassword\")} />\r\n//                             </div>\r\n//                             <div className=\"col-12\">\r\n//                                 <button type=\"submit\" className=\"btn btn-primary\" >Login <LockOpenRoundedIcon /> </button>\r\n//                             </div>\r\n//                         </form>\r\n//                     </div>\r\n//                     <div className=\"card-footer text-muted\">\r\n//                         I don't have an account - <a href=\"/register\">register </a>\r\n//                     </div>\r\n//                 </div>\r\n\r\n//             </React.Fragment>\r\n\r\n//         )\r\n//     }\r\n// }\r\n\r\n// LoginBody.contextType = AppContext","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\ChatBody.jsx",["280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306"],"import React, { useContext, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    Link,\r\n    useParams,\r\n    useHistory\r\n\r\n} from 'react-router-dom';\r\n\r\nimport { io } from \"socket.io-client\"\r\n// import ChatAsideCss from './chatStyle/ChatAside.css'\r\n// import ChatBoxCss from './chatStyle/ChatBox.css'\r\n\r\nimport ChatStyle from './styles/ChatStyle.css'\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport AddCommentIcon from '@material-ui/icons/AddComment';\r\n\r\nimport { format } from \"timeago.js\"\r\n\r\n\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport Api from '../functions/Api';\r\n\r\n\r\nexport default function ChatBody() {\r\n    const context = useContext(AuthContext)\r\n\r\n    const history = useHistory()\r\n    // ############# -- socket -- ##################\r\n\r\n    // const socket = useRef()\r\n\r\n    // useEffect(() => socket.current = io(\"ws://localhost:8900\"), [])\r\n\r\n    // const [usersIsConnected, setUsersIsConnected] = useState([])\r\n    // useEffect(() => {\r\n    // context.socket.on(\"usersIsConnected\", users => {\r\n    //     console.log(\"IS CON:\", users)\r\n    //     setUsersIsConnected(users)\r\n    //     getUsersConversationWith()\r\n    // })\r\n    //     console.log(context.usersIsConnected)\r\n    // }, [context])\r\n\r\n\r\n\r\n\r\n    const [conversations, setConversations] = useState([])\r\n\r\n    const [conversation, setConversation] = useState({})\r\n    const [followingsUsers, setFollowingsUsers] = useState({})\r\n\r\n    const [conversationMessages, setConversationMessages] = useState([])\r\n    const [arrivalMessage, setArrivalMessage] = useState(null)\r\n\r\n\r\n    const [usersConversationMessagesWith, setUsersConversationMessageWith] = useState([])\r\n\r\n    const [usersConversationsWith, setUsersConversationsWith] = useState({})\r\n    const { conversationId } = useParams()\r\n\r\n    const messageRef = useRef()\r\n    const scrollRef = useRef()\r\n\r\n\r\n    useEffect(async () => {\r\n        let followingsUsersAv = Object.create(followingsUsers)\r\n        await Promise.all(context.user.followings.map(async userId => {\r\n            await Api.fetchUser(userId).then(res => {\r\n                followingsUsersAv[res.data._id] = res.data\r\n            })\r\n        })).then(() => {\r\n\r\n            setFollowingsUsers(followingsUsersAv)\r\n        })\r\n\r\n    }, [context])\r\n\r\n    useEffect(() => {\r\n\r\n        context.socket.on(\"getMessage\", data => {\r\n            setArrivalMessage({\r\n                senderId: data.senderId,\r\n                text: data.text,\r\n                createdAt: Date.now()\r\n            })\r\n        })\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (arrivalMessage && conversation && conversation._id) {\r\n            if (conversation.members.includes(arrivalMessage.senderId)) {\r\n                setConversationMessages(prev => [...prev, arrivalMessage])\r\n            }\r\n        }\r\n    }, [arrivalMessage, conversation])\r\n\r\n\r\n    const getUsersConversationWith = () => {\r\n        Promise.all(conversations.map(c => {\r\n            c.members.map(m => {\r\n                if (m != context.user._id) {\r\n                    return Api.fetchUser(m).then(res => {\r\n                        if (res.status == 200 && res.data._id) {\r\n                            let usersConversationsWithAv = Object.create(usersConversationsWith)\r\n\r\n                            let userIsConnected = false\r\n\r\n                            if (context.usersIsConnected.some(user => user.userId == res.data._id))\r\n                                userIsConnected = true\r\n\r\n                            // if (!Array.from(Object.values(usersConversationsWithAv)).some(uc => uc.conversationId == c._id)) {\r\n                            //     usersConversationsWithAv[res.data._id] = {\r\n                            //         user: res.data,\r\n                            //         conversationId: c._id,\r\n                            //         userIsConnected: userIsConnected\r\n                            //     }\r\n                            // }\r\n\r\n                            usersConversationsWithAv[res.data._id] = {\r\n                                user: res.data,\r\n                                conversationId: c._id,\r\n                                userIsConnected: userIsConnected\r\n                            }\r\n\r\n\r\n                            setUsersConversationsWith(prev => {\r\n                                return {...prev, ...usersConversationsWithAv}\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })).then(() => {\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const getConversation = async () => {\r\n        if (conversationId) {\r\n            await Api.getConversationByid(conversationId, context.user._id).then(async res => {\r\n                if (res.status == 200 && res.data) {\r\n                    let usersConversationMessagesWithAv = Array.from(usersConversationMessagesWith)\r\n                    await Promise.all(res.data.members.map(async mId => {\r\n                        if (!usersConversationMessagesWithAv.some(value => value._id == mId)) {\r\n                            await Api.fetchUser(mId).then(res => {\r\n                                usersConversationMessagesWithAv.push(res.data)\r\n                            })\r\n                        }\r\n                    })).then(() => {\r\n                        setUsersConversationMessageWith(usersConversationMessagesWithAv)\r\n                    })\r\n\r\n                    setConversation(res.data)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const getConversationMessages = async () => {\r\n        if (conversation && conversation._id) {\r\n            const secondUser = conversation.members.filter(u => u != context.user._id)\r\n            Api.getConversationMessages(conversationId, context.user_id, secondUser).then(async res => {\r\n                if (res.status == 200 && res.data.length > 0) {\r\n                    setConversationMessages(res.data)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const getUsersConversationMessagesWith = async () => {\r\n        // if (conversationMessages && conversationMessages.length > 0) {\r\n        conversationMessages.forEach(async cm => {\r\n            if (cm.senderId != context.user._id) {\r\n                await Api.fetchUser(cm.senderId).then(res => {\r\n                    let usersConversationMessagesWithAv = Array.from(usersConversationMessagesWith)\r\n                    usersConversationMessagesWithAv.push(res.data)\r\n                    setUsersConversationMessageWith(usersConversationMessagesWithAv)\r\n                })\r\n                return\r\n            }\r\n        })\r\n        // }\r\n    }\r\n\r\n\r\n\r\n    useEffect(async () => {\r\n        await Api.getUserConversations(context.user._id).then(res => {\r\n            setConversations(res.data)\r\n\r\n            getUsersConversationWith()\r\n        })\r\n        getConversation()\r\n    }, [conversationId])\r\n\r\n\r\n    useEffect(() => {\r\n        getUsersConversationWith()\r\n    }, [conversations, context])\r\n\r\n    useEffect(() => {\r\n        getConversationMessages()\r\n    }, [conversation])\r\n\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [conversationMessages])\r\n\r\n\r\n\r\n    // send message\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (conversation && conversation._id) {\r\n            let messageText = messageRef.current.value\r\n            if (messageText && messageText.length > 0) {\r\n\r\n                Api.createMessage(conversation._id, context.user._id, messageText).then(res => {\r\n                    getConversationMessages()\r\n                    messageRef.current.value = \"\"\r\n                })\r\n\r\n                const receiverId = conversation.members.find(member => member != context.user._id)\r\n                context.socket.emit(\"sendMessage\", {\r\n                    senderId: context.user._id,\r\n                    receiverId: receiverId,\r\n                    text: messageText\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleNewConversation = async (e) => {\r\n        const username = e.target.textContent.trim()\r\n        await Api.fetchUser(username, \"username\").then(res => {\r\n            let userId = res.data._id\r\n            try {\r\n                Api.getConversation(context.user._id, userId).then(resConv => {\r\n                    if (resConv.status == 200 && resConv.data) {\r\n                        history.push(`/chat/${resConv.data._id}`)\r\n                    }\r\n                    else {\r\n                        Api.createConversation(context.user._id, userId).then(resConv2 => {\r\n                            if (resConv2.status == 200 && resConv2.data)\r\n                                history.push(`/chat/${resConv2.data._id}`)\r\n                            setConversation(prev => [...prev, resConv2.data])\r\n                        })\r\n                    }\r\n                })\r\n            } catch (err) {\r\n                Api.createConversation(context.user._id, userId).then(resConv => {\r\n                    if (resConv.status == 200)\r\n                        history.push(`/chat/${resConv.data._id}`)\r\n                    setConversation(prev => [...prev, resConv.data])\r\n                })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    function UserDev({ data, conversationId }) {\r\n        return (\r\n            <Link to={`/chat/${conversationId}`} class=\"btn btn-light d-flex align-items-center position-relative mt-2\" id={conversationId}>\r\n\r\n                <div className=\"profileImg\" style={{ backgroundImage: `url(${data.user.profileImg})` }}></div>\r\n                <span className=\"username position-relative\" href=\"#\">\r\n                    {data.user.username}\r\n                </span>\r\n\r\n                {\r\n                    function () {\r\n                        if (data.isConnected == true) {\r\n                            return (\r\n                                <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-success rounded-circle\">\r\n                                    <span className=\"visually-hidden\">New alerts</span>\r\n                                </span>\r\n                            )\r\n                        }\r\n                    }()\r\n                }\r\n\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    function UserBoxDev() {\r\n        return (\r\n            <div class=\"nav flex-column nav-pills me-3\" id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\r\n\r\n                <button type=\"button\" class=\"btn btn-warning mb-3\" data-bs-toggle=\"modal\" data-bs-target=\"#newConversationModal\"><AddCommentIcon /></button>\r\n\r\n                {\r\n                    Array.from(Object.values(usersConversationsWith)).map(uc => {\r\n                        return <UserDev data={{ user: uc.user, isConnected: uc.userIsConnected }} key={uc.user._id} conversationId={uc.conversationId} />\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function MessageDev({ message }) {\r\n        let senderType = \"puT\"\r\n        if (message.senderId == context.user._id) {\r\n            senderType = \"puO\"\r\n        }\r\n        let user = usersConversationMessagesWith.filter(u => u._id == message.senderId)[0]\r\n        return (\r\n            <div className={`msgbox ${senderType}`} ref={scrollRef}>\r\n                <Link className=\"profileImg-sm\" to={`/profile/${user.username}`} style={{ backgroundImage: `url(${user.profileImg})` }}></Link>\r\n                <div className=\"msg\">\r\n                    <div className=\"msg-text\">\r\n                        {message.text}\r\n                    </div>\r\n                    <div><small className=\"msg-time text-muted\">{format(message.createdAt)}</small></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function MessageBoxDev() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className=\"m-5\">\r\n\r\n                </div>\r\n\r\n                {\r\n                    Array.from(Object.values(conversationMessages)).map(cm => {\r\n\r\n                        return <MessageDev message={cm} key={cm._id} />\r\n                    })\r\n                }\r\n\r\n\r\n                {\r\n                    conversation._id ?\r\n\r\n                        <nav class=\"navbar position-fixed navbar-light bg-light mt-5 pb-sm-5 bg-body rounded nav-form\">\r\n                            <form class=\"container-fluid\" id=\"form_message\" onSubmit={handleSubmit}>\r\n\r\n                                <div class=\"input-group\">\r\n                                    {/* <span class=\"input-group-text\">#</span> */}\r\n                                    <textarea type=\"text\" name=\"message\" id=\"message\" rows=\"1\" cols=\"80\" class=\"form-control\" placeholder=\"Message ....\" autocomplete=\"off\" spellcheck=\"false\" required style={{ maxHeight: \"100px\" }} ref={messageRef}></textarea>\r\n                                    <button class=\"btn btn-warning\"><SendIcon /></button>\r\n                                </div>\r\n\r\n                            </form>\r\n                        </nav>\r\n                        : null\r\n                }\r\n\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <React.Fragment>\r\n\r\n                <div className=\"position-relative h-100 \">\r\n\r\n                    <button class=\"btn btn-light position-absolute\" type=\"button\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\" aria-controls=\"offcanvasExample\">\r\n                        <ListIcon />\r\n                    </button>\r\n\r\n                    <aside className=\"bd-sidebar sticky-top m-3 d-none d-sm-block\">\r\n                        <nav className=\"navbar navbar-light bg-light bd-users-nav-chat shadow\" style={{ borderRadius: \"1.25rem\" }}>\r\n                            <div className=\"p-3 mb-3\">\r\n                                <UserBoxDev />\r\n                            </div>\r\n                        </nav>\r\n                    </aside>\r\n                </div>\r\n\r\n\r\n                <div class=\"offcanvas offcanvas-start rounded\" style={{ width: \"200px\" }} tabindex=\"-1\" id=\"offcanvasExample\" aria-labelledby=\"offcanvasExampleLabel\">\r\n                    <div class=\"offcanvas-header\">\r\n                        <h5 class=\"offcanvas-title\" id=\"offcanvasExampleLabel\">Offcanvas</h5>\r\n                        <button type=\"button\" class=\"btn-close text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"offcanvas-body d-flex flex-column align-items-start\">\r\n                        <UserBoxDev />\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n\r\n            <React.Fragment>\r\n                <div class=\"container\" >\r\n\r\n                    <div id=\"message_box\">\r\n\r\n                        {/* <div class=\"tab-content\" id=\"v-pills-tabContent\">\r\n\r\n                        </div> */}\r\n                        <MessageBoxDev />\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </React.Fragment>\r\n\r\n            <div className=\"modal fade\" id=\"newConversationModal\" tabIndex=\"-1\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog  modal-dialog-centered\">\r\n                    <div className=\"modal-content custom-modal\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">New Conversation</h5>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n\r\n                            <div class=\"btn-group-vertical w-100\">\r\n\r\n                                {\r\n                                    Array.from(Object.values(followingsUsers)).map(user => {\r\n\r\n                                        return <button className=\"btn btn-light\" onClick={handleNewConversation} data-bs-dismiss=\"modal\" aria-label=\"Close\"> {user.username}</button>\r\n                                    })\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\RegisterBody.jsx",["307","308","309","310","311","312","313","314","315","316","317","318","319","320"],"import React, { Component, useRef, useState, useEffect, useContext } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport ExitToAppRoundedIcon from '@material-ui/icons/ExitToAppRounded';\r\nimport LockOpenRoundedIcon from '@material-ui/icons/LockOpenRounded';\r\n\r\nimport Api from '../functions/Api';\r\nimport Browser from '../functions/Browser';\r\nimport constants from \"../constant/general\"\r\n\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { loginApiContext } from '../ApiContext';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: 1000000000000,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function RegisterBody() {\r\n\r\n    const context = useContext(AuthContext)\r\n\r\n\r\n    const classes = useStyles();\r\n    const [openBackdrop, setOpenBackdrop] = React.useState(false);\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n\r\n    const inputEmail = useRef()\r\n    const inputPassword = useRef()\r\n    const inputPasswordConfirmation = useRef()\r\n    const inputUsername = useRef()\r\n    const inputName = useRef()\r\n    const inputCity = useRef()\r\n    const inputFrom = useRef()\r\n    const inputDescription = useRef()\r\n    const inputCoverImg = useRef()\r\n    const inputProfileImg = useRef()\r\n\r\n    const { ALLOWED_IMG, ALLOWED_IMG_SIZE } = constants\r\n\r\n\r\n    // const ALLOWED_IMG = [\"image/png\", \"image/jpeg\"]\r\n    // const ALLOWED_IMG_SIZE = 5\r\n\r\n    function checkUserValidate(username) {\r\n        let validcharacters = '1234567890-_.abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n\r\n        let usernameCheck = username.split(\"\")\r\n        usernameCheck = usernameCheck.map(uchar => validcharacters.includes(uchar))\r\n        console.log(usernameCheck)\r\n        if (usernameCheck.includes(false)) {\r\n            return false\r\n        } else {\r\n            return true\r\n        }\r\n\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        setOpenBackdrop(true)\r\n        event.preventDefault()\r\n        console.log(!context.isFetching)\r\n        if (!context.isFetching) {\r\n\r\n            if (inputPassword.current.value != inputPasswordConfirmation.current.value) {\r\n                return inputPasswordConfirmation.current.setCustomValidity(\"Password don't match!\")\r\n            }\r\n\r\n            if (!checkUserValidate(inputUsername.current.value)) {\r\n                return inputUsername.current.setCustomValidity(\"Validate user\")\r\n            }\r\n\r\n\r\n            const coverImg = inputCoverImg.current.files[0]\r\n            const profileImg = inputProfileImg.current.files[0]\r\n\r\n            const userData = {\r\n                email: inputEmail.current.value,\r\n                password: inputPassword.current.value,\r\n                username: inputUsername.current.value,\r\n                name: inputName.current.value,\r\n                city: inputCity.current.value,\r\n                from: inputFrom.current.value,\r\n                desc: inputDescription.current.value,\r\n            }\r\n\r\n            try {\r\n                setIsFetching(true)\r\n\r\n\r\n                const fromData = new FormData()\r\n                fromData.append(\"coverImg\", coverImg)\r\n                fromData.append(\"profileImg\", profileImg)\r\n\r\n                console.log(userData)\r\n\r\n                if (coverImg != {}) coverImg.id = \"coverImg\"\r\n                if (profileImg != {}) profileImg.id = \"profileImg\"\r\n\r\n\r\n\r\n                await Api.registerUser(userData).then(async res => {\r\n                    console.log(res)\r\n                    if (res.status == 200) {\r\n                        console.log(coverImg, profileImg)\r\n                        console.log(!coverImg, !profileImg)\r\n                        if (coverImg && profileImg) {\r\n\r\n                            const imgData = {\r\n                                set: true\r\n                            }\r\n\r\n\r\n                            if (coverImg != {}) imgData.coverImg = \"\"\r\n                            if (profileImg != {}) imgData.profileImg = \"\"\r\n\r\n                            console.log(imgData)\r\n\r\n\r\n                            await Api.updateUserImg(res.data._id, res.data._id, imgData, fromData)\r\n\r\n                        }\r\n\r\n                        let userCredentials = {\r\n                            userEmail: inputEmail.current.value,\r\n                            userPassword: inputPassword.current.value\r\n                        }\r\n\r\n                        await loginApiContext(userCredentials, context.dispatch).then(res => {\r\n                            if (res.status == 200) {\r\n                                setIsFetching(false)\r\n                            }\r\n                        })\r\n                    }\r\n                })\r\n\r\n            } catch (err) {\r\n                setIsFetching(false)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    const handleUpload = async (e) => {\r\n\r\n        const [file] = e.target.files\r\n\r\n        if (file && ALLOWED_IMG.includes(file.type)) {\r\n\r\n            let img = {}\r\n            let quality = 7\r\n\r\n            const fileSize = file.size / 1000 / 1000\r\n\r\n            if (e.target.attributes.id.value == \"inputCoverImg\") {\r\n\r\n                img = document.getElementById(\"preview-coverImg\")\r\n                // quality = .3\r\n            }\r\n            else if (e.target.attributes.id.value == \"inputProfileImg\") {\r\n\r\n                img = document.getElementById(\"preview-profileImg\")\r\n                // quality = .2\r\n            }\r\n\r\n            if (file && fileSize < ALLOWED_IMG_SIZE) {\r\n                img.hidden = false\r\n\r\n                const reader = new FileReader();\r\n                reader.onload = (event) => {\r\n                    let imgDataUrl = event.target.result;\r\n                    img.style.backgroundImage = `url(${imgDataUrl})`\r\n\r\n                    // Browser.resizeImage(imgDataUrl, file.type, quality).then(res => {\r\n                    //     let newFileSize = res.length / 100000\r\n                    //     console.log(res, newFileSize)\r\n                    //     if (newFileSize < 1) {\r\n                    //         img.style.backgroundImage = `url(${res})`\r\n                    //         console.log(img.style.backgroundImage)\r\n                    //     }\r\n                    // })\r\n                };\r\n                reader.readAsDataURL(file);\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            {\r\n                isFetching ?\r\n                    <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                        <CircularProgress color=\"light\" />\r\n                    </Backdrop>\r\n                    :\r\n                    openBackdrop ? setOpenBackdrop(false) : null\r\n            }\r\n            {\r\n                context.user ? <Redirect exact to=\"/\" /> : <Redirect to=\"/register\" />\r\n            }\r\n            <div className=\"card text-center m-auto custom-card\" style={{ maxWidth: \"500px\" }}>\r\n\r\n\r\n                <div className=\"card-header\">\r\n                    REGISTER\r\n                </div>\r\n                {\r\n\r\n                    isFetching ?\r\n                        <LinearProgress />\r\n                        :\r\n                        <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>\r\n                }\r\n                <div className=\"card-body\">\r\n                    <form className=\"row g-4 \" onSubmit={handleSubmit}>\r\n                        <div className=\"col-md-6\">\r\n                            <label for=\"inputEmail\" className=\"form-label\">Email</label>\r\n                            <input type=\"email\" className=\"form-control\" id=\"inputEmail\" placeholder=\"Email\" ref={inputEmail} required />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label for=\"inputPassword\" className=\"form-label\">Password</label>\r\n                            <input type=\"password\" className=\"form-control\" id=\"inputPassword\" minLength=\"6\" placeholder=\"Password\" ref={inputPassword} required />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label for=\"inputPasswordConfirmation\" className=\"form-label\">Password Confirmation</label>\r\n                            <input type=\"password\" className=\"form-control\" id=\"inputPasswordConfirmation\" minLength=\"6\" placeholder=\"Password Confirmation\" ref={inputPasswordConfirmation} required />\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <label for=\"inputUsername\" className=\"form-label\">Username</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"inputUsername\" placeholder=\"Username\" required ref={inputUsername} />\r\n                        </div>\r\n                        <div className=\"col-12\">\r\n                            <label for=\"inputName\" className=\"form-label\">Your Name</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"inputName\" placeholder=\"You Name\" ref={inputName} required />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label for=\"inputCity\" className=\"form-label\">City</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"inputCity\" placeholder=\"City\" ref={inputCity} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label for=\"inputFrom\" className=\"form-label\">From</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"inputFrom\" placeholder=\"From\" ref={inputFrom} />\r\n                        </div>\r\n\r\n                        <div className=\"g-4 mb-5 mt-5\">\r\n                            <hr />\r\n                            <div className=\"col-md-12 mb-5\">\r\n                                <label for=\"inputProfileImg\" className=\"form-label\">Profile Image</label>\r\n                                <input type=\"file\" className=\"form-control\" id=\"inputProfileImg\" onChange={handleUpload} placeholder=\"profile image\" accept=\"image/png, image/jpeg\" ref={inputProfileImg} required />\r\n                            </div>\r\n                            <div className=\"col-md-12 mb-5\">\r\n                                <label for=\"inputCoverImg\" className=\"form-label\">Cover Image</label>\r\n                                <input type=\"file\" className=\"form-control\" id=\"inputCoverImg\" onChange={handleUpload} placeholder=\"profile image\" accept=\"image/png, image/jpeg\" ref={inputCoverImg} required />\r\n                            </div>\r\n\r\n                            <div id=\"preview\">\r\n                                <div className={`card-img-top coverImg-center`} id=\"preview-coverImg\" >\r\n                                </div>\r\n                                <div className={`profileImg-center shadow-lg p-1 bg-body rounded-circle`} id=\"preview-profileImg\" >\r\n                                </div>\r\n                            </div>\r\n\r\n                            <hr />\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12\">\r\n                            <label for=\"inputDescription\" className=\"form-label\">Description</label>\r\n                            <textarea className=\"form-control\" id=\"inputDescription\" rows=\"3\" ref={inputDescription}></textarea>\r\n                        </div>\r\n\r\n                        <div className=\"col-12\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n                                <div>\r\n\r\n                                    {isFetching ? \"Loading\" : \"Register\"}\r\n\r\n                                    {\r\n                                        isFetching ?\r\n                                            <CircularProgress disableShrink color=\"white\" size=\"20px\" className=\"ms-1\" thickness={5} style={{ marginBottom: \"-5px\" }} />\r\n                                            :\r\n                                            <ExitToAppRoundedIcon className=\"ms-1\" />\r\n                                    }\r\n                                </div>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n                <div className=\"card-footer text-muted\">\r\n                    I have an account - <a href=\"/login\">login </a>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\preview\\PreviewPost.jsx",["321","322","323","324"],"import React, { useState, useContext, useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\n\r\n\r\nimport Post from \"../../components/Post.jsx\"\r\n\r\nimport Api from \"../../functions/Api\"\r\n\r\nexport default function PreviewPost() {\r\n\r\n    const { id } = useParams()\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"d-flex flex-row justify-content-center h-100 position-relative\">\r\n                <div className=\"body-container mt-5\">\r\n\r\n                    <Post postId={id} />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\pages\\create\\CreatePost.jsx",["325","326"],"\r\nimport React, { Component, useContext } from 'react'\r\n\r\nimport CreatePostBody from '../../components/CreatePostBody.jsx'\r\n\r\n\r\n\r\nexport default function Register() {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"d-flex flex-row justify-content-center h-100 position-relative\">\r\n                <div className=\"body-container mt-5\">\r\n                    <CreatePostBody />\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\Post.jsx",["327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344"],"import React, { Component, useEffect, useState, useContext } from 'react'\r\n\r\n// import {addLike} from \"../functions/Post\"\r\n\r\nimport axios from \"axios\"\r\nimport { format } from \"timeago.js\"\r\nimport Api from \"../functions/Api\"\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { updateLoginApiContext } from \"../ApiContext\"\r\n\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport AccountCircleRoundedIcon from '@material-ui/icons/AccountCircleRounded';\r\nimport MeetingRoomRoundedIcon from '@material-ui/icons/MeetingRoomRounded';\r\nimport SettingsRoundedIcon from '@material-ui/icons/SettingsRounded';\r\n\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\n\r\n\r\nexport default function Post(props) {\r\n    // props : postId, posts\r\n    const context = useContext(AuthContext)\r\n\r\n    const [user, setUser] = useState({})\r\n    const [post, setPost] = useState({})\r\n    const [likeCount, setLikeCount] = useState(0)\r\n    const [isLike, setIsLike] = useState(false)\r\n\r\n    const [modalId, setModalId] = useState(`A${uuidv4()}`)\r\n\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n\r\n    useEffect(() => {\r\n        updateLoginApiContext(context.dispatch)\r\n    }, [isLike])\r\n\r\n\r\n    const fetchPost = async () => {\r\n        setIsFetching(true)\r\n        await Api.fetchPost(props.postId).then(res => {\r\n            setPost(res.data)\r\n        })\r\n    }\r\n\r\n    const fetchUser = async () => {\r\n        await Api.fetchUser(post.userId).then(res => {\r\n            setUser(res.data)\r\n        })\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (post._id) {\r\n            setIsFetching(false)\r\n\r\n            setLikeCount(post?.likes.length)\r\n            setIsLike(post?.likes.includes(context.user._id))\r\n            fetchUser()\r\n        }\r\n\r\n\r\n    }, [post])\r\n\r\n    useEffect(() => {\r\n        setIsFetching(false)\r\n        fetchPost()\r\n    }, [props.postId])\r\n\r\n\r\n    const likePost = async () => {\r\n        console.log(context.user._id)\r\n        const res = await Api.likePost(post._id, context.user._id)\r\n        return res.status\r\n    }\r\n\r\n\r\n    const handlerLike = async () => {\r\n        const resStatus = await likePost()\r\n        if (resStatus == 200) {\r\n            if (isLike) {\r\n                post.likes = post.likes.filter(e => {\r\n                    return e != context.user._id\r\n                })\r\n            } else {\r\n                post.likes.push(context.user._id)\r\n            }\r\n\r\n            setLikeCount(post?.likes.length)\r\n            setIsLike(!isLike)\r\n\r\n            // await updateLoginApiContext(context.dispatch)\r\n        }\r\n    }\r\n\r\n\r\n    function handleLikeStatusDev() {\r\n\r\n        if (isLike == true || isLike == \"true\") {\r\n            return <FavoriteIcon />\r\n        } else {\r\n            return <FavoriteBorderIcon />\r\n        }\r\n\r\n    }\r\n\r\n    const handelDeletePost = async () => {\r\n        if (post._id) {\r\n\r\n            let posts = props.state.posts\r\n            posts = posts.filter(p => p._id != post._id)\r\n\r\n            props.state.setPosts(posts)\r\n\r\n            await Api.deletePost(post._id, context.user._id).then(res => {\r\n                console.log(res.data)\r\n                if (res == 200) {\r\n                    setPost({});\r\n                    return <Redirect to={`/profile/${context.user.username}`} />\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"card mb-5 custom-card\">\r\n                <div className=\"card-header d-flex\">\r\n\r\n                    <div>\r\n\r\n                        <Link to={`/profile/${user.username}`} className=\"btn btn-sm btn-light d-flex align-items-center\">\r\n\r\n                            <div className={`profileImg ${user.profileImg ? `loadImg` : `isLoading`}`} style={{ backgroundImage: (!user.profileImg ? `` : `url(${user.profileImg})`) }} ></div>\r\n                            <span className=\"username\">{user.username}</span>\r\n                        </Link>\r\n                    </div>\r\n\r\n                    <button type=\"button\" id={`B${uuidv4()}`} className=\"btn btn-sm btn-light ms-auto rounded-pill\" data-bs-toggle=\"modal\" data-bs-target={`#${modalId}`} >\r\n                        <MoreHorizIcon />\r\n                    </button>\r\n\r\n\r\n                </div>\r\n\r\n                {\r\n                    // isFetching ?\r\n                    // <LinearProgress />\r\n                    // :\r\n                    // <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>\r\n                }\r\n\r\n                <div style={{ backgroundImage: (!post.img ? `` : `url(${post.img})`) }} sizes=\"614px\" className={`card-img-bottom feedImg ${post.img ? `loadImg` : `isLoading`}`}>\r\n                    {isFetching ?\r\n                        <CircularProgress color=\"secondary\" />\r\n                        :\r\n                        null\r\n                    }\r\n                </div>\r\n                <div className=\"card-body\">\r\n                    <h5 className=\"card-title\">{post.title}</h5>\r\n\r\n\r\n                    <p className=\"card-text\">{post.desc}</p>\r\n                    <p className=\"card-text\"><small className=\"text-muted\">{format(post.createdAt)}</small></p>\r\n                    <button className=\"btn btn-sm btn-danger text-dark\" onClick={() => handlerLike()}>\r\n                        {handleLikeStatusDev()}\r\n                        <span className=\"badge bg-light text-dark ms-1\">{isFetching ? <CircularProgress size={10} /> : likeCount}</span>\r\n                    </button>\r\n                    {/* <button className=\"btn btn-sm btn-warning ms-4\">\r\n            <ChatBubbleOutlineIcon />\r\n            <span className=\"badge bg-light text-dark ms-1\">{postCommentCount}</span>\r\n        </button> */}\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <div className=\"modal fade\" id={modalId} tabIndex=\"-1\" aria-labelledby={`B${uuidv4()}`} aria-hidden=\"true\">\r\n                <div className=\"modal-dialog  modal-dialog-centered\">\r\n                    <div className=\"modal-content custom-modal\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">{user.username} - post</h5>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n\r\n                            {\r\n                                post.userId == context.user._id ? (\r\n\r\n                                    <div class=\"btn-group-vertical w-100\">\r\n                                        <button className=\"btn btn-light\" onClick={handelDeletePost} data-bs-dismiss=\"modal\" aria-label=\"Close\"> delete</button>\r\n                                        <button className=\"btn btn-light\" onClick={() => {\r\n                                            let postLink = `${window.location.host}/preview/post/${post._id}`\r\n                                            navigator.clipboard.writeText(postLink)\r\n                                        }}> getLink</button>\r\n                                    </div>\r\n                                )\r\n                                    :\r\n                                    null\r\n                            }\r\n\r\n\r\n\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n                            {/* <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\r\n                                    <button type=\"button\" className=\"btn btn-primary\">Save changes</button> */}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\n// export default className Post extends Component {\r\n//     // props : post , userId\r\n//     constructor(props) {\r\n//         super(props)\r\n//     }\r\n//     state = {\r\n//         user: {},\r\n//         isLike: false,\r\n//         likeCount: 0\r\n//     }\r\n\r\n\r\n\r\n//     fetchUser = async () => {\r\n//         await Api.fetchUser(this.props.post.userId).then(res => {\r\n//             this.setState({ user: res.data })\r\n//         })\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         this.fetchUser()\r\n\r\n//         this.state.likeCount = this.props.post?.likes.length\r\n//         this.state.isLike = this.props.post?.likes.includes(this.props.userId)\r\n//     }\r\n\r\n//     componentDidUpdate(prevProps, prevState) {\r\n//         if (prevProps.userId !== this.props.userId) {\r\n//             this.fetchUser()\r\n//         }\r\n//     }\r\n\r\n//     likePost = async () => {\r\n//         const res = await Api.likePost(this.props.post._id, this.props.userId)\r\n//         return res.status\r\n//     }\r\n\r\n\r\n//     handlerLike = async () => {\r\n//         const resStatus = await this.likePost()\r\n//         if (resStatus == 200) {\r\n\r\n//             if (this.state.isLike) {\r\n//                 this.props.post.likes = this.props.post.likes.filter(e => {\r\n//                     return e != this.props.userId\r\n//                 })\r\n//             } else {\r\n//                 this.props.post.likes.push(this.props.userId)\r\n//             }\r\n\r\n//             this.setState({ likeCount: this.props.post?.likes.length })\r\n//             this.setState({ isLike: !this.state.isLike })\r\n//         }\r\n\r\n//     }\r\n\r\n//     handleLikeStatusDev() {\r\n\r\n//         if (this.state.isLike == true || this.state.isLike == \"true\") {\r\n//             return <FavoriteIcon />\r\n//         } else {\r\n//             return <FavoriteBorderIcon />\r\n//         }\r\n\r\n//     }\r\n\r\n//     render() {\r\n\r\n//         return (\r\n\r\n//             <div className=\"card mb-3\">\r\n//                 <h5 className=\"card-header\">\r\n//                     <Link to={`/profile/${this.state.user.username}`} className=\"btn btn-sm btn-light\">\r\n//                         <img className=\"profileImg\" src={this.state.user.profileImg} alt=\"\" />\r\n//                         <span className=\"username\">{this.state.user.username}</span>\r\n//                     </Link>\r\n//                 </h5>\r\n//                 <img src={this.props.post.img} className=\"card-img-bottom feedImg\" alt=\"...\" />\r\n//                 <div className=\"card-body\">\r\n//                     <h5 className=\"card-title\">{this.props.post.title}</h5>\r\n//                     {\r\n\r\n//                         /* This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer. \r\n//                         Card title\r\n//                         */\r\n//                     }\r\n//                     <p className=\"card-text\">{this.props.post.desc}</p>\r\n//                     <p className=\"card-text\"><small className=\"text-muted\">{format(this.props.post.createdAt)}</small></p>\r\n//                     <button className=\"btn btn-sm btn-danger text-dark\" onClick={() => this.handlerLike()}>\r\n//                         {this.handleLikeStatusDev()}\r\n//                         <span className=\"badge bg-light text-dark ms-1\">{this.state.likeCount}</span>\r\n//                     </button>\r\n//                     {/* <button className=\"btn btn-sm btn-warning ms-4\">\r\n//                     <ChatBubbleOutlineIcon />\r\n//                     <span className=\"badge bg-light text-dark ms-1\">{postCommentCount}</span>\r\n//                 </button> */}\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n\r\n// export default function Post({ post }) {\r\n//     console.log(post);\r\n//     let postLikeCount = post.likes.length\r\n//     console.log(postLikeCount);\r\n//     let postIsLike = true\r\n\r\n//     const [like, setLike] = useState(postLikeCount)\r\n//     const [isLike, setIsLike] = useState(postIsLike)\r\n\r\n//     function addLike() {\r\n//         setLike(isLike ? like - 1 : like + 1)\r\n//         setIsLike(!isLike)\r\n//     }\r\n\r\n//     const user = {\r\n//         username: \"s3q\",\r\n//         profileImg: \"profile.jpg\"\r\n//     }\r\n\r\n//     return (\r\n//         <div className=\"card mb-3\">\r\n//             <h5 className=\"card-header\">\r\n//                 <a href=\"#\" type=\"button\" className=\"btn btn-sm btn-light\">\r\n//                     <img className=\"profileImg\" src={user.profileImg} alt=\"\" />\r\n//                     <span href=\"#\" className=\"username\">{user.username}</span>\r\n//                 </a>\r\n//             </h5>\r\n//             <img src={post.img} className=\"card-img-bottom feedImg\" alt=\"...\" />\r\n//             <div className=\"card-body\">\r\n//                 <h5 className=\"card-title\">{post.title}</h5>\r\n//                 {\r\n//                     /* This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer. \r\n//                     Card title\r\n//                     */\r\n//                 }\r\n//                 <p className=\"card-text\">{post.desc}</p>\r\n//                 <p className=\"card-text\"><small className=\"text-muted\">{post.createdAt} ago</small></p>\r\n//                 <button className=\"btn btn-sm btn-danger text-dark\" onClick={addLike()}>\r\n//                     {\r\n//                         function () {\r\n//                             if (isLike == \"true\") {\r\n//                                 return <FavoriteIcon />\r\n//                             } else {\r\n//                                 return <FavoriteBorderIcon />\r\n//                             }\r\n//                         }()\r\n//                     }\r\n\r\n//                     <span className=\"badge bg-light text-dark ms-1\">{like}</span>\r\n//                 </button>\r\n//                 {/* <button className=\"btn btn-sm btn-warning ms-4\">\r\n//                     <ChatBubbleOutlineIcon />\r\n//                     <span className=\"badge bg-light text-dark ms-1\">{postCommentCount}</span>\r\n//                 </button> */}\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\SahreBar.jsx",["345","346"],"import React, { useContext } from 'react'\r\n\r\nimport AddBoxIcon from '@material-ui/icons/AddBox';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport ExploreIcon from '@material-ui/icons/Explore';\r\nimport SettingsRoundedIcon from '@material-ui/icons/SettingsRounded';\r\n\r\n\r\nimport { Link } from \"react-router-dom\"\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nexport default function ShareBar() {\r\n    const context = useContext(AuthContext)\r\n\r\n    return (\r\n        <div className=\"card mb-5 mt-2 custom-card\">\r\n            <div className=\"d-flex flex-wrap p-4\">\r\n                <div>\r\n\r\n                    <a type=\"button\" href=\"#\" className=\"btn btn-sm btn-light\">\r\n                        <div className=\"profileImg-lg\" style={{ backgroundImage: `url(${context.user.profileImg})` }} > </div>\r\n                        <span href=\"#\" className=\"username-lg\">{context.user.username}</span>\r\n                    </a>\r\n                </div>\r\n                <div className=\"ms-auto\">\r\n                    <Link to=\"/create/post\" type=\"button\" className=\"btn btn-sm btn-secondary text-dark d-block\">Add Post  <AddBoxIcon /></Link>\r\n                    <Link to=\"/settings\" type=\"button\" className=\"btn btn-sm btn-danger text-dark d-block mt-3\">Settings  <SettingsRoundedIcon /></Link>\r\n                    <Link to=\"/explore\" type=\"button\" className=\"btn btn-sm btn-warning d-block mt-3\">Explore  <ExploreIcon /></Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\CreatePostBody.jsx",["347","348","349","350"],"import React, { useContext, useRef, useState, useEffect } from 'react'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport url_join from \"url-join\"\r\nimport uuid from \"uuid\"\r\nimport Api from '../functions/Api';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { updateLoginApiContext } from \"../ApiContext\"\r\n\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CircularProgress, LinearProgress } from \"@material-ui/core\"\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Browser from '../functions/Browser';\r\nimport constants from \"../constant/general\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: 1000000000000,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\n\r\nexport default function PostPostBody() {\r\n\r\n    const context = useContext(AuthContext)\r\n\r\n    const inputMedia = useRef()\r\n    const inputTitle = useRef()\r\n    const inputDescription = useRef()\r\n\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const [isFinishing, setIsFinishing] = useState(false)\r\n\r\n    const classes = useStyles();\r\n    const [openBackdrop, setOpenBackdrop] = React.useState(false);\r\n\r\n    const { ALLOWED_IMG, ALLOWED_IMG_SIZE } = constants\r\n\r\n\r\n    // const ALLOWED_IMG = [\"image/png\", \"image/jpeg\"]\r\n    // const ALLOWED_IMG_SIZE = 5\r\n\r\n \r\n    useEffect(() => {\r\n\r\n        updateLoginApiContext(context.dispatch)\r\n\r\n    }, [isFinishing])\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (!isFetching) {\r\n\r\n            setIsFinishing(false)\r\n            setOpenBackdrop(true)\r\n            setIsFetching(true)\r\n\r\n\r\n            const [file] = inputMedia.current.files\r\n\r\n            const postData = {\r\n                userId: context.user._id,\r\n                title: inputTitle.current.value,\r\n                desc: inputDescription.current.value,\r\n                img: \"\"\r\n            }\r\n\r\n            try {\r\n                const fromData = new FormData()\r\n                fromData.append(\"file\", file)\r\n\r\n\r\n                await Api.createPost(postData, fromData).then(async res => {\r\n                    console.log(res)\r\n                    \r\n                    setIsFetching(false)\r\n                    setIsFinishing(true)\r\n                })\r\n\r\n            } catch (err) {\r\n                console.error(err)\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    const handleUpload = async (e) => {\r\n\r\n        const [file] = e.target.files\r\n\r\n        if (file && ALLOWED_IMG.includes(file.type)) {\r\n\r\n            const fileSize = file.size / 1000 / 1000\r\n            \r\n            const img = document.getElementById(\"preview-img\");\r\n\r\n            if (file && fileSize < ALLOWED_IMG_SIZE) {\r\n                img.hidden = false\r\n\r\n                const reader = new FileReader();\r\n                reader.onload = (event) => {\r\n                    let imgDataurl = event.target.result;\r\n                    img.style.backgroundImage = `url(${imgDataurl})`\r\n\r\n                    // Browser.resizeImage(imgDataurl, file.type, quality).then(res => {\r\n                    //     let newFileSize = res.length / 100000\r\n                    //     if (newFileSize < 1) {\r\n                    //         img.style.backgroundImage = `url(${imgDataurl})`\r\n                    //     }\r\n                    // })\r\n                    // Browser.compressImg(img, file.type)\r\n                    // Browser.resizeFile(img)\r\n                };\r\n                reader.readAsDataURL(file);\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n\r\n            {\r\n                isFetching ?\r\n                    <Backdrop className={classes.backdrop} open={openBackdrop}>\r\n                        <CircularProgress color=\"light\" />\r\n                    </Backdrop>\r\n                    :\r\n                    openBackdrop ? setOpenBackdrop(false) : null\r\n            }\r\n            {\r\n                isFinishing ? <Redirect exact to={`/profile/${context.user.username}`} /> : <Redirect to=\"/create/post\" />\r\n            }\r\n            <div className=\"card text-center m-auto custom-card\" style={{ maxWidth: \"500px\" }}>\r\n\r\n                <div className=\"card-header\">\r\n                    CREAT POST\r\n                </div>\r\n                {\r\n                    isFetching ?\r\n                        <LinearProgress />\r\n                        :\r\n                        <div className=\"bg-light\" style={{ padding: \".12rem\" }}></div>\r\n                }\r\n                <div className=\"card-body\">\r\n\r\n                    <form className=\"row g-4\" onSubmit={handleSubmit}>\r\n                        <div className=\"col-md-6\">\r\n                            <label for=\"inputTitle\" className=\"form-label\">Title</label>\r\n                            <input type=\"text\" className=\"form-control\" id=\"inputTitle\" placeholder=\"Title\" ref={inputTitle} maxlength=\"40\" />\r\n                        </div>\r\n                        <div className=\"g-4 mb-5 mt-5\">\r\n                            <hr />\r\n                            <div className=\"col-md-12 mb-5\">\r\n                                <label for=\"inputMedia\" className=\"form-label\">Media File</label>\r\n                                <input type=\"file\" className=\"form-control\" id=\"inputMedia\" placeholder=\"Media File\" onChange={handleUpload} accept=\"image/png, image/jpeg\" ref={inputMedia} />\r\n                            </div>\r\n                            <div id=\"preview\">\r\n                                <div sizes=\"614px\" className={`card-img-bottom feedImg`} id=\"preview-img\">\r\n                                </div>\r\n                            </div>\r\n                            <hr />\r\n                        </div>\r\n\r\n                        <div className=\"col-md-12\">\r\n                            <label for=\"inputDescription\" className=\"form-label\">Description</label>\r\n                            <textarea className=\"form-control\" id=\"inputDescription\" rows=\"3\" ref={inputDescription} maxlength=\"150\"></textarea>\r\n                        </div>\r\n\r\n                        <div className=\"col-12\">\r\n                            <button type=\"submit\" className=\"btn btn-primary\">\r\n\r\n                                <div>\r\n\r\n                                    {isFetching ? \"Loading\" : \"Send Post\"}\r\n\r\n                                    {\r\n                                        isFetching ?\r\n                                            <CircularProgress disableShrink color=\"white\" size=\"20px\" className=\"ms-1\" thickness={5} style={{ marginBottom: \"-5px\" }} />\r\n                                            :\r\n                                            <SendRoundedIcon className=\"ms-1\" />\r\n                                    }\r\n                                </div>\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\constant\\general.js",[],"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\elements\\TabPanel.jsx",[],["351","352"],"C:\\Users\\s3q\\Documents\\GitHub\\medical-encyclopedia\\medical-encyclopedia-app\\src\\components\\elements\\Button.jsx",["353","354"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from '@material-ui/core';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\n\r\nconst Btn = withStyles({\r\n    root: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        borderRadius: 0,\r\n        border: 0,\r\n        color: 'white',\r\n        height: 48,\r\n        padding: '0 30px',\r\n        fontStyle: \"none\",\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n  \r\n})(Button);\r\n\r\nexport {\r\n    Btn,\r\n}",{"ruleId":"355","severity":1,"message":"356","line":1,"column":16,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"359","line":1,"column":28,"nodeType":"357","messageId":"358","endLine":1,"endColumn":37},{"ruleId":"355","severity":1,"message":"360","line":8,"column":31,"nodeType":"357","messageId":"358","endLine":8,"endColumn":42},{"ruleId":"355","severity":1,"message":"361","line":9,"column":10,"nodeType":"357","messageId":"358","endLine":9,"endColumn":31},{"ruleId":"362","replacedBy":"363"},{"ruleId":"364","replacedBy":"365"},{"ruleId":"355","severity":1,"message":"366","line":21,"column":8,"nodeType":"357","messageId":"358","endLine":21,"endColumn":12},{"ruleId":"355","severity":1,"message":"367","line":44,"column":12,"nodeType":"357","messageId":"358","endLine":44,"endColumn":19},{"ruleId":"355","severity":1,"message":"368","line":44,"column":21,"nodeType":"357","messageId":"358","endLine":44,"endColumn":31},{"ruleId":"369","severity":1,"message":"370","line":46,"column":15,"nodeType":"371","endLine":49,"endColumn":6},{"ruleId":"369","severity":1,"message":"372","line":49,"column":8,"nodeType":"373","endLine":49,"endColumn":10,"suggestions":"374"},{"ruleId":"375","severity":1,"message":"376","line":12,"column":28,"nodeType":"377","messageId":"378","endLine":12,"endColumn":30},{"ruleId":"375","severity":1,"message":"379","line":12,"column":59,"nodeType":"377","messageId":"378","endLine":12,"endColumn":61},{"ruleId":"355","severity":1,"message":"380","line":1,"column":59,"nodeType":"357","messageId":"358","endLine":1,"endColumn":65},{"ruleId":"355","severity":1,"message":"381","line":2,"column":8,"nodeType":"357","messageId":"358","endLine":2,"endColumn":11},{"ruleId":"355","severity":1,"message":"382","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":15},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"359","line":1,"column":50,"nodeType":"357","messageId":"358","endLine":1,"endColumn":59},{"ruleId":"355","severity":1,"message":"384","line":4,"column":8,"nodeType":"357","messageId":"358","endLine":4,"endColumn":14},{"ruleId":"355","severity":1,"message":"385","line":10,"column":10,"nodeType":"357","messageId":"358","endLine":10,"endColumn":29},{"ruleId":"355","severity":1,"message":"386","line":14,"column":11,"nodeType":"357","messageId":"358","endLine":14,"endColumn":18},{"ruleId":"355","severity":1,"message":"387","line":16,"column":13,"nodeType":"357","messageId":"358","endLine":16,"endColumn":17},{"ruleId":"355","severity":1,"message":"388","line":16,"column":19,"nodeType":"357","messageId":"358","endLine":16,"endColumn":26},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"384","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":14},{"ruleId":"355","severity":1,"message":"382","line":9,"column":8,"nodeType":"357","messageId":"358","endLine":9,"endColumn":15},{"ruleId":"355","severity":1,"message":"389","line":11,"column":10,"nodeType":"357","messageId":"358","endLine":11,"endColumn":26},{"ruleId":"355","severity":1,"message":"386","line":21,"column":11,"nodeType":"357","messageId":"358","endLine":21,"endColumn":18},{"ruleId":"355","severity":1,"message":"390","line":29,"column":12,"nodeType":"357","messageId":"358","endLine":29,"endColumn":23},{"ruleId":"355","severity":1,"message":"391","line":29,"column":25,"nodeType":"357","messageId":"358","endLine":29,"endColumn":39},{"ruleId":"369","severity":1,"message":"370","line":33,"column":15,"nodeType":"371","endLine":36,"endColumn":6},{"ruleId":"369","severity":1,"message":"392","line":36,"column":8,"nodeType":"373","endLine":36,"endColumn":18,"suggestions":"393"},{"ruleId":"355","severity":1,"message":"384","line":2,"column":8,"nodeType":"357","messageId":"358","endLine":2,"endColumn":14},{"ruleId":"355","severity":1,"message":"394","line":3,"column":8,"nodeType":"357","messageId":"358","endLine":3,"endColumn":16},{"ruleId":"355","severity":1,"message":"395","line":8,"column":22,"nodeType":"357","messageId":"358","endLine":8,"endColumn":28},{"ruleId":"355","severity":1,"message":"396","line":9,"column":5,"nodeType":"357","messageId":"358","endLine":9,"endColumn":11},{"ruleId":"355","severity":1,"message":"397","line":10,"column":5,"nodeType":"357","messageId":"358","endLine":10,"endColumn":10},{"ruleId":"355","severity":1,"message":"398","line":1,"column":10,"nodeType":"357","messageId":"358","endLine":1,"endColumn":18},{"ruleId":"355","severity":1,"message":"359","line":2,"column":29,"nodeType":"357","messageId":"358","endLine":2,"endColumn":38},{"ruleId":"355","severity":1,"message":"361","line":7,"column":10,"nodeType":"357","messageId":"358","endLine":7,"endColumn":31},{"ruleId":"355","severity":1,"message":"399","line":12,"column":11,"nodeType":"357","messageId":"358","endLine":12,"endColumn":18},{"ruleId":"375","severity":1,"message":"376","line":18,"column":21,"nodeType":"377","messageId":"378","endLine":18,"endColumn":23},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"400","line":4,"column":5,"nodeType":"357","messageId":"358","endLine":4,"endColumn":14},{"ruleId":"355","severity":1,"message":"401","line":5,"column":5,"nodeType":"357","messageId":"358","endLine":5,"endColumn":15},{"ruleId":"355","severity":1,"message":"386","line":19,"column":11,"nodeType":"357","messageId":"358","endLine":19,"endColumn":18},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"402","line":4,"column":36,"nodeType":"357","messageId":"358","endLine":4,"endColumn":40},{"ruleId":"355","severity":1,"message":"403","line":4,"column":42,"nodeType":"357","messageId":"358","endLine":4,"endColumn":50},{"ruleId":"355","severity":1,"message":"404","line":4,"column":52,"nodeType":"357","messageId":"358","endLine":4,"endColumn":57},{"ruleId":"355","severity":1,"message":"405","line":6,"column":10,"nodeType":"357","messageId":"358","endLine":6,"endColumn":14},{"ruleId":"355","severity":1,"message":"406","line":13,"column":8,"nodeType":"357","messageId":"358","endLine":13,"endColumn":23},{"ruleId":"355","severity":1,"message":"400","line":24,"column":16,"nodeType":"357","messageId":"358","endLine":24,"endColumn":25},{"ruleId":"355","severity":1,"message":"407","line":24,"column":39,"nodeType":"357","messageId":"358","endLine":24,"endColumn":50},{"ruleId":"355","severity":1,"message":"361","line":26,"column":10,"nodeType":"357","messageId":"358","endLine":26,"endColumn":31},{"ruleId":"369","severity":1,"message":"408","line":57,"column":8,"nodeType":"373","endLine":57,"endColumn":23,"suggestions":"409"},{"ruleId":"375","severity":1,"message":"376","line":64,"column":22,"nodeType":"377","messageId":"378","endLine":64,"endColumn":24},{"ruleId":"375","severity":1,"message":"379","line":64,"column":35,"nodeType":"377","messageId":"378","endLine":64,"endColumn":37},{"ruleId":"410","severity":1,"message":"411","line":78,"column":39,"nodeType":"412","messageId":"413","endLine":78,"endColumn":40},{"ruleId":"375","severity":1,"message":"376","line":109,"column":21,"nodeType":"377","messageId":"378","endLine":109,"endColumn":23},{"ruleId":"375","severity":1,"message":"376","line":109,"column":48,"nodeType":"377","messageId":"378","endLine":109,"endColumn":50},{"ruleId":"355","severity":1,"message":"383","line":2,"column":17,"nodeType":"357","messageId":"358","endLine":2,"endColumn":26},{"ruleId":"355","severity":1,"message":"384","line":4,"column":8,"nodeType":"357","messageId":"358","endLine":4,"endColumn":14},{"ruleId":"355","severity":1,"message":"394","line":5,"column":8,"nodeType":"357","messageId":"358","endLine":5,"endColumn":16},{"ruleId":"355","severity":1,"message":"395","line":3,"column":22,"nodeType":"357","messageId":"358","endLine":3,"endColumn":28},{"ruleId":"355","severity":1,"message":"396","line":4,"column":5,"nodeType":"357","messageId":"358","endLine":4,"endColumn":11},{"ruleId":"355","severity":1,"message":"398","line":6,"column":5,"nodeType":"357","messageId":"358","endLine":6,"endColumn":13},{"ruleId":"355","severity":1,"message":"395","line":3,"column":22,"nodeType":"357","messageId":"358","endLine":3,"endColumn":28},{"ruleId":"355","severity":1,"message":"396","line":4,"column":5,"nodeType":"357","messageId":"358","endLine":4,"endColumn":11},{"ruleId":"355","severity":1,"message":"398","line":6,"column":5,"nodeType":"357","messageId":"358","endLine":6,"endColumn":13},{"ruleId":"355","severity":1,"message":"395","line":3,"column":22,"nodeType":"357","messageId":"358","endLine":3,"endColumn":28},{"ruleId":"355","severity":1,"message":"396","line":4,"column":5,"nodeType":"357","messageId":"358","endLine":4,"endColumn":11},{"ruleId":"355","severity":1,"message":"398","line":6,"column":5,"nodeType":"357","messageId":"358","endLine":6,"endColumn":13},{"ruleId":"414","severity":1,"message":"415","line":119,"column":13,"nodeType":"357","messageId":"416","endLine":119,"endColumn":20},{"ruleId":"375","severity":1,"message":"376","line":134,"column":28,"nodeType":"377","messageId":"378","endLine":134,"endColumn":30},{"ruleId":"375","severity":1,"message":"376","line":137,"column":29,"nodeType":"377","messageId":"378","endLine":137,"endColumn":31},{"ruleId":"417","severity":1,"message":"418","line":144,"column":1,"nodeType":"419","endLine":153,"endColumn":2},{"ruleId":"375","severity":1,"message":"376","line":138,"column":36,"nodeType":"377","messageId":"378","endLine":138,"endColumn":38},{"ruleId":"375","severity":1,"message":"376","line":196,"column":32,"nodeType":"377","messageId":"378","endLine":196,"endColumn":34},{"ruleId":"420","severity":1,"message":"421","line":234,"column":26,"nodeType":"371","messageId":"422","endLine":234,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":244,"column":26,"nodeType":"371","messageId":"422","endLine":244,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":253,"column":26,"nodeType":"371","messageId":"422","endLine":253,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":262,"column":26,"nodeType":"371","messageId":"422","endLine":262,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":272,"column":26,"nodeType":"371","messageId":"422","endLine":272,"endColumn":28},{"ruleId":"420","severity":1,"message":"421","line":281,"column":26,"nodeType":"371","messageId":"422","endLine":281,"endColumn":28},{"ruleId":"417","severity":1,"message":"418","line":333,"column":1,"nodeType":"419","endLine":374,"endColumn":2},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"389","line":7,"column":10,"nodeType":"357","messageId":"358","endLine":7,"endColumn":26},{"ruleId":"355","severity":1,"message":"423","line":10,"column":8,"nodeType":"357","messageId":"358","endLine":10,"endColumn":13},{"ruleId":"355","severity":1,"message":"387","line":20,"column":12,"nodeType":"357","messageId":"358","endLine":20,"endColumn":16},{"ruleId":"355","severity":1,"message":"388","line":20,"column":18,"nodeType":"357","messageId":"358","endLine":20,"endColumn":25},{"ruleId":"355","severity":1,"message":"390","line":24,"column":12,"nodeType":"357","messageId":"358","endLine":24,"endColumn":23},{"ruleId":"355","severity":1,"message":"391","line":24,"column":25,"nodeType":"357","messageId":"358","endLine":24,"endColumn":39},{"ruleId":"369","severity":1,"message":"424","line":42,"column":8,"nodeType":"373","endLine":42,"endColumn":10,"suggestions":"425"},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"400","line":4,"column":5,"nodeType":"357","messageId":"358","endLine":4,"endColumn":14},{"ruleId":"355","severity":1,"message":"401","line":5,"column":5,"nodeType":"357","messageId":"358","endLine":5,"endColumn":15},{"ruleId":"375","severity":1,"message":"376","line":27,"column":57,"nodeType":"377","messageId":"378","endLine":27,"endColumn":59},{"ruleId":"375","severity":1,"message":"376","line":41,"column":41,"nodeType":"377","messageId":"378","endLine":41,"endColumn":43},{"ruleId":"369","severity":1,"message":"426","line":71,"column":8,"nodeType":"373","endLine":71,"endColumn":10,"suggestions":"427"},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"428","line":7,"column":28,"nodeType":"357","messageId":"358","endLine":7,"endColumn":42},{"ruleId":"355","severity":1,"message":"429","line":11,"column":10,"nodeType":"357","messageId":"358","endLine":11,"endColumn":14},{"ruleId":"369","severity":1,"message":"372","line":30,"column":8,"nodeType":"373","endLine":30,"endColumn":50,"suggestions":"430"},{"ruleId":"369","severity":1,"message":"431","line":49,"column":8,"nodeType":"373","endLine":49,"endColumn":20,"suggestions":"432"},{"ruleId":"375","severity":1,"message":"379","line":53,"column":54,"nodeType":"377","messageId":"378","endLine":53,"endColumn":56},{"ruleId":"375","severity":1,"message":"379","line":78,"column":22,"nodeType":"377","messageId":"378","endLine":78,"endColumn":24},{"ruleId":"375","severity":1,"message":"376","line":81,"column":31,"nodeType":"377","messageId":"378","endLine":81,"endColumn":33},{"ruleId":"375","severity":1,"message":"379","line":84,"column":34,"nodeType":"377","messageId":"378","endLine":84,"endColumn":36},{"ruleId":"375","severity":1,"message":"376","line":96,"column":31,"nodeType":"377","messageId":"378","endLine":96,"endColumn":33},{"ruleId":"375","severity":1,"message":"376","line":150,"column":31,"nodeType":"377","messageId":"378","endLine":150,"endColumn":33},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"433","line":1,"column":39,"nodeType":"357","messageId":"358","endLine":1,"endColumn":47},{"ruleId":"355","severity":1,"message":"397","line":5,"column":5,"nodeType":"357","messageId":"358","endLine":5,"endColumn":10},{"ruleId":"355","severity":1,"message":"381","line":11,"column":8,"nodeType":"357","messageId":"358","endLine":11,"endColumn":11},{"ruleId":"355","severity":1,"message":"385","line":15,"column":27,"nodeType":"357","messageId":"358","endLine":15,"endColumn":46},{"ruleId":"355","severity":1,"message":"382","line":22,"column":8,"nodeType":"357","messageId":"358","endLine":22,"endColumn":15},{"ruleId":"355","severity":1,"message":"399","line":35,"column":11,"nodeType":"357","messageId":"358","endLine":35,"endColumn":18},{"ruleId":"369","severity":1,"message":"370","line":43,"column":15,"nodeType":"371","endLine":63,"endColumn":6},{"ruleId":"355","severity":1,"message":"434","line":75,"column":15,"nodeType":"357","messageId":"358","endLine":75,"endColumn":18},{"ruleId":"355","severity":1,"message":"435","line":9,"column":10,"nodeType":"357","messageId":"358","endLine":9,"endColumn":12},{"ruleId":"355","severity":1,"message":"436","line":13,"column":8,"nodeType":"357","messageId":"358","endLine":13,"endColumn":17},{"ruleId":"369","severity":1,"message":"370","line":67,"column":15,"nodeType":"371","endLine":78,"endColumn":6},{"ruleId":"369","severity":1,"message":"437","line":78,"column":8,"nodeType":"373","endLine":78,"endColumn":17,"suggestions":"438"},{"ruleId":"369","severity":1,"message":"439","line":90,"column":8,"nodeType":"373","endLine":90,"endColumn":10,"suggestions":"440"},{"ruleId":"420","severity":1,"message":"421","line":102,"column":41,"nodeType":"371","messageId":"422","endLine":102,"endColumn":43},{"ruleId":"420","severity":1,"message":"441","line":103,"column":29,"nodeType":"371","messageId":"442","endLine":103,"endColumn":31},{"ruleId":"375","severity":1,"message":"379","line":104,"column":23,"nodeType":"377","messageId":"378","endLine":104,"endColumn":25},{"ruleId":"375","severity":1,"message":"376","line":106,"column":40,"nodeType":"377","messageId":"378","endLine":106,"endColumn":42},{"ruleId":"375","severity":1,"message":"376","line":111,"column":83,"nodeType":"377","messageId":"378","endLine":111,"endColumn":85},{"ruleId":"375","severity":1,"message":"376","line":145,"column":32,"nodeType":"377","messageId":"378","endLine":145,"endColumn":34},{"ruleId":"375","severity":1,"message":"376","line":148,"column":86,"nodeType":"377","messageId":"378","endLine":148,"endColumn":88},{"ruleId":"375","severity":1,"message":"379","line":167,"column":67,"nodeType":"377","messageId":"378","endLine":167,"endColumn":69},{"ruleId":"375","severity":1,"message":"376","line":169,"column":32,"nodeType":"377","messageId":"378","endLine":169,"endColumn":34},{"ruleId":"355","severity":1,"message":"443","line":176,"column":11,"nodeType":"357","messageId":"358","endLine":176,"endColumn":43},{"ruleId":"375","severity":1,"message":"379","line":179,"column":29,"nodeType":"377","messageId":"378","endLine":179,"endColumn":31},{"ruleId":"369","severity":1,"message":"370","line":193,"column":15,"nodeType":"371","endLine":200,"endColumn":6},{"ruleId":"369","severity":1,"message":"444","line":200,"column":8,"nodeType":"373","endLine":200,"endColumn":24,"suggestions":"445"},{"ruleId":"369","severity":1,"message":"446","line":205,"column":8,"nodeType":"373","endLine":205,"endColumn":32,"suggestions":"447"},{"ruleId":"369","severity":1,"message":"448","line":209,"column":8,"nodeType":"373","endLine":209,"endColumn":22,"suggestions":"449"},{"ruleId":"375","severity":1,"message":"379","line":229,"column":79,"nodeType":"377","messageId":"378","endLine":229,"endColumn":81},{"ruleId":"375","severity":1,"message":"376","line":245,"column":40,"nodeType":"377","messageId":"378","endLine":245,"endColumn":42},{"ruleId":"375","severity":1,"message":"376","line":250,"column":49,"nodeType":"377","messageId":"378","endLine":250,"endColumn":51},{"ruleId":"375","severity":1,"message":"376","line":258,"column":40,"nodeType":"377","messageId":"378","endLine":258,"endColumn":42},{"ruleId":"375","severity":1,"message":"376","line":279,"column":46,"nodeType":"377","messageId":"378","endLine":279,"endColumn":48},{"ruleId":"375","severity":1,"message":"376","line":311,"column":30,"nodeType":"377","messageId":"378","endLine":311,"endColumn":32},{"ruleId":"375","severity":1,"message":"376","line":314,"column":68,"nodeType":"377","messageId":"378","endLine":314,"endColumn":70},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"359","line":1,"column":46,"nodeType":"357","messageId":"358","endLine":1,"endColumn":55},{"ruleId":"355","severity":1,"message":"450","line":5,"column":8,"nodeType":"357","messageId":"358","endLine":5,"endColumn":27},{"ruleId":"355","severity":1,"message":"382","line":8,"column":8,"nodeType":"357","messageId":"358","endLine":8,"endColumn":15},{"ruleId":"375","severity":1,"message":"379","line":73,"column":45,"nodeType":"377","messageId":"378","endLine":73,"endColumn":47},{"ruleId":"375","severity":1,"message":"379","line":105,"column":30,"nodeType":"377","messageId":"378","endLine":105,"endColumn":32},{"ruleId":"375","severity":1,"message":"379","line":106,"column":32,"nodeType":"377","messageId":"378","endLine":106,"endColumn":34},{"ruleId":"375","severity":1,"message":"376","line":112,"column":36,"nodeType":"377","messageId":"378","endLine":112,"endColumn":38},{"ruleId":"375","severity":1,"message":"379","line":122,"column":42,"nodeType":"377","messageId":"378","endLine":122,"endColumn":44},{"ruleId":"375","severity":1,"message":"379","line":123,"column":44,"nodeType":"377","messageId":"378","endLine":123,"endColumn":46},{"ruleId":"375","severity":1,"message":"376","line":138,"column":44,"nodeType":"377","messageId":"378","endLine":138,"endColumn":46},{"ruleId":"355","severity":1,"message":"451","line":159,"column":17,"nodeType":"357","messageId":"358","endLine":159,"endColumn":24},{"ruleId":"375","severity":1,"message":"376","line":163,"column":46,"nodeType":"377","messageId":"378","endLine":163,"endColumn":48},{"ruleId":"375","severity":1,"message":"376","line":168,"column":51,"nodeType":"377","messageId":"378","endLine":168,"endColumn":53},{"ruleId":"355","severity":1,"message":"433","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":25},{"ruleId":"355","severity":1,"message":"356","line":1,"column":27,"nodeType":"357","messageId":"358","endLine":1,"endColumn":37},{"ruleId":"355","severity":1,"message":"359","line":1,"column":39,"nodeType":"357","messageId":"358","endLine":1,"endColumn":48},{"ruleId":"355","severity":1,"message":"381","line":7,"column":8,"nodeType":"357","messageId":"358","endLine":7,"endColumn":11},{"ruleId":"355","severity":1,"message":"383","line":2,"column":17,"nodeType":"357","messageId":"358","endLine":2,"endColumn":26},{"ruleId":"355","severity":1,"message":"356","line":2,"column":28,"nodeType":"357","messageId":"358","endLine":2,"endColumn":38},{"ruleId":"355","severity":1,"message":"383","line":1,"column":17,"nodeType":"357","messageId":"358","endLine":1,"endColumn":26},{"ruleId":"355","severity":1,"message":"423","line":5,"column":8,"nodeType":"357","messageId":"358","endLine":5,"endColumn":13},{"ruleId":"355","severity":1,"message":"452","line":17,"column":8,"nodeType":"357","messageId":"358","endLine":17,"endColumn":29},{"ruleId":"355","severity":1,"message":"453","line":19,"column":8,"nodeType":"357","messageId":"358","endLine":19,"endColumn":32},{"ruleId":"355","severity":1,"message":"454","line":20,"column":8,"nodeType":"357","messageId":"358","endLine":20,"endColumn":30},{"ruleId":"355","severity":1,"message":"455","line":21,"column":8,"nodeType":"357","messageId":"358","endLine":21,"endColumn":27},{"ruleId":"355","severity":1,"message":"428","line":23,"column":28,"nodeType":"357","messageId":"358","endLine":23,"endColumn":42},{"ruleId":"355","severity":1,"message":"456","line":35,"column":21,"nodeType":"357","messageId":"358","endLine":35,"endColumn":31},{"ruleId":"369","severity":1,"message":"372","line":42,"column":8,"nodeType":"373","endLine":42,"endColumn":16,"suggestions":"457"},{"ruleId":"369","severity":1,"message":"458","line":71,"column":8,"nodeType":"373","endLine":71,"endColumn":14,"suggestions":"459"},{"ruleId":"369","severity":1,"message":"460","line":76,"column":8,"nodeType":"373","endLine":76,"endColumn":22,"suggestions":"461"},{"ruleId":"375","severity":1,"message":"376","line":88,"column":23,"nodeType":"377","messageId":"378","endLine":88,"endColumn":25},{"ruleId":"375","severity":1,"message":"379","line":91,"column":30,"nodeType":"377","messageId":"378","endLine":91,"endColumn":32},{"ruleId":"375","severity":1,"message":"376","line":107,"column":20,"nodeType":"377","messageId":"378","endLine":107,"endColumn":22},{"ruleId":"375","severity":1,"message":"376","line":107,"column":38,"nodeType":"377","messageId":"378","endLine":107,"endColumn":40},{"ruleId":"375","severity":1,"message":"379","line":119,"column":45,"nodeType":"377","messageId":"378","endLine":119,"endColumn":47},{"ruleId":"375","severity":1,"message":"376","line":125,"column":25,"nodeType":"377","messageId":"378","endLine":125,"endColumn":27},{"ruleId":"375","severity":1,"message":"376","line":197,"column":45,"nodeType":"377","messageId":"378","endLine":197,"endColumn":47},{"ruleId":"355","severity":1,"message":"462","line":4,"column":8,"nodeType":"357","messageId":"358","endLine":4,"endColumn":19},{"ruleId":"463","severity":1,"message":"464","line":20,"column":21,"nodeType":"465","endLine":20,"endColumn":80},{"ruleId":"355","severity":1,"message":"466","line":4,"column":8,"nodeType":"357","messageId":"358","endLine":4,"endColumn":16},{"ruleId":"355","severity":1,"message":"467","line":5,"column":8,"nodeType":"357","messageId":"358","endLine":5,"endColumn":12},{"ruleId":"355","severity":1,"message":"382","line":15,"column":8,"nodeType":"357","messageId":"358","endLine":15,"endColumn":15},{"ruleId":"369","severity":1,"message":"372","line":51,"column":8,"nodeType":"373","endLine":51,"endColumn":21,"suggestions":"468"},{"ruleId":"362","replacedBy":"469"},{"ruleId":"364","replacedBy":"470"},{"ruleId":"355","severity":1,"message":"471","line":1,"column":8,"nodeType":"357","messageId":"358","endLine":1,"endColumn":13},{"ruleId":"355","severity":1,"message":"472","line":2,"column":8,"nodeType":"357","messageId":"358","endLine":2,"endColumn":17},"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'AuthContext' is defined but never used.","'updateLoginApiContext' is defined but never used.","no-native-reassign",["473"],"no-negated-in-lhs",["474"],"'Chat' is defined but never used.","'isLogin' is assigned a value but never used.","'setIsLogin' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'context.dispatch'. Either include it or remove the dependency array.","ArrayExpression",["475"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","'Api' is defined but never used.","'Browser' is defined but never used.","'Component' is defined but never used.","'Navbar' is defined but never used.","'autoLoginApiContext' is defined but never used.","'context' is assigned a value but never used.","'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","'CircularProgress' is defined but never used.","'isFinishing' is assigned a value but never used.","'setIsFinishing' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'fetchUser'. Either include it or remove the dependency array.",["476"],"'AsideBar' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'Redirect' is defined but never used.","'history' is assigned a value but never used.","'useParams' is defined but never used.","'useHistory' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Badge' is defined but never used.","'Zoom' is defined but never used.","'HomeRoundedIcon' is defined but never used.","'useLocation' is defined but never used.","React Hook useEffect has a missing dependency: 'handleChange'. Either include it or remove the dependency array.",["477"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-redeclare","'expires' is already defined.","redeclared","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'axios' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchPosts'. Either include it or remove the dependency array.",["478"],"React Hook useEffect has a missing dependency: 'fetchUserFriends'. Either include it or remove the dependency array.",["479"],"'LinearProgress' is defined but never used.","'Link' is defined but never used.",["480"],"React Hook useEffect has a missing dependency: 'context.user._id'. Either include it or remove the dependency array.",["481"],"'useState' is defined but never used.","'res' is assigned a value but never used.","'io' is defined but never used.","'ChatStyle' is defined but never used.","React Hook useEffect has a missing dependency: 'followingsUsers'. Either include it or remove the dependency array.",["482"],"React Hook useEffect has a missing dependency: 'context.socket'. Either include it or remove the dependency array.",["483"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'getUsersConversationMessagesWith' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'context.user._id', 'getConversation', and 'getUsersConversationWith'. Either include them or remove the dependency array.",["484"],"React Hook useEffect has a missing dependency: 'getUsersConversationWith'. Either include it or remove the dependency array.",["485"],"React Hook useEffect has a missing dependency: 'getConversationMessages'. Either include it or remove the dependency array.",["486"],"'LockOpenRoundedIcon' is defined but never used.","'quality' is assigned a value but never used.","'ChatBubbleOutlineIcon' is defined but never used.","'AccountCircleRoundedIcon' is defined but never used.","'MeetingRoomRoundedIcon' is defined but never used.","'SettingsRoundedIcon' is defined but never used.","'setModalId' is assigned a value but never used.",["487"],"React Hook useEffect has missing dependencies: 'context.user._id' and 'fetchUser'. Either include them or remove the dependency array.",["488"],"React Hook useEffect has a missing dependency: 'fetchPost'. Either include it or remove the dependency array.",["489"],"'RefreshIcon' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'url_join' is defined but never used.","'uuid' is defined but never used.",["490"],["473"],["474"],"'React' is defined but never used.","'PropTypes' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"491","fix":"492"},{"desc":"493","fix":"494"},{"desc":"495","fix":"496"},{"desc":"497","fix":"498"},{"desc":"499","fix":"500"},{"desc":"501","fix":"502"},{"desc":"503","fix":"504"},{"desc":"505","fix":"506"},{"desc":"507","fix":"508"},{"desc":"509","fix":"510"},{"desc":"511","fix":"512"},{"desc":"513","fix":"514"},{"desc":"515","fix":"516"},{"desc":"517","fix":"518"},{"desc":"519","fix":"520"},{"desc":"521","fix":"522"},"Update the dependencies array to be: [context.dispatch]",{"range":"523","text":"524"},"Update the dependencies array to be: [fetchUser, username]",{"range":"525","text":"526"},"Update the dependencies array to be: [path, history, handleChange]",{"range":"527","text":"528"},"Update the dependencies array to be: [fetchPosts]",{"range":"529","text":"530"},"Update the dependencies array to be: [fetchUserFriends]",{"range":"531","text":"532"},"Update the dependencies array to be: [user, isFollowing, followers, followings, context.dispatch]",{"range":"533","text":"534"},"Update the dependencies array to be: [context.user._id, props.user]",{"range":"535","text":"536"},"Update the dependencies array to be: [context, followingsUsers]",{"range":"537","text":"538"},"Update the dependencies array to be: [context.socket]",{"range":"539","text":"540"},"Update the dependencies array to be: [context.user._id, conversationId, getConversation, getUsersConversationWith]",{"range":"541","text":"542"},"Update the dependencies array to be: [conversations, context, getUsersConversationWith]",{"range":"543","text":"544"},"Update the dependencies array to be: [conversation, getConversationMessages]",{"range":"545","text":"546"},"Update the dependencies array to be: [context.dispatch, isLike]",{"range":"547","text":"548"},"Update the dependencies array to be: [context.user._id, fetchUser, post]",{"range":"549","text":"550"},"Update the dependencies array to be: [fetchPost, props.postId]",{"range":"551","text":"552"},"Update the dependencies array to be: [context.dispatch, isFinishing]",{"range":"553","text":"554"},[1293,1295],"[context.dispatch]",[968,978],"[fetchUser, username]",[2073,2088],"[path, history, handleChange]",[1020,1022],"[fetchPosts]",[2060,2062],"[fetchUserFriends]",[1065,1107],"[user, isFollowing, followers, followings, context.dispatch]",[1596,1608],"[context.user._id, props.user]",[2312,2321],"[context, followingsUsers]",[2587,2589],"[context.socket]",[6906,6922],"[context.user._id, conversationId, getConversation, getUsersConversationWith]",[6995,7019],"[conversations, context, getUsersConversationWith]",[7089,7103],"[conversation, getConversationMessages]",[1500,1508],"[context.dispatch, isLike]",[2081,2087],"[context.user._id, fetchUser, post]",[2173,2187],"[fetchPost, props.postId]",[1457,1470],"[context.dispatch, isFinishing]"]