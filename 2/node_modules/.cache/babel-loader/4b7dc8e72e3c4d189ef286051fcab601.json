{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\s3q\\\\Documents\\\\GitHub\\\\medical-encyclopedia\\\\medical-encyclopedia-app\\\\src\\\\components\\\\ChatBody.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useRef } from 'react';\nimport { Link, useParams, useHistory } from 'react-router-dom';\nimport { io } from \"socket.io-client\"; // import ChatAsideCss from './chatStyle/ChatAside.css'\n// import ChatBoxCss from './chatStyle/ChatBox.css'\n\nimport ChatStyle from './/ChatStyle.css';\nimport SendIcon from '@material-ui/icons/Send';\nimport ListIcon from '@material-ui/icons/List';\nimport AddCommentIcon from '@material-ui/icons/AddComment';\nimport { format } from \"timeago.js\";\nimport { AuthContext } from '../context/AuthContext';\nimport Api from '../functions/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatBody() {\n  _s();\n\n  const context = useContext(AuthContext);\n  const history = useHistory(); // ############# -- socket -- ##################\n  // const socket = useRef()\n  // useEffect(() => socket.current = io(\"ws://localhost:8900\"), [])\n  // const [usersIsConnected, setUsersIsConnected] = useState([])\n  // useEffect(() => {\n  // context.socket.on(\"usersIsConnected\", users => {\n  //     console.log(\"IS CON:\", users)\n  //     setUsersIsConnected(users)\n  //     getUsersConversationWith()\n  // })\n  //     console.log(context.usersIsConnected)\n  // }, [context])\n\n  const [conversations, setConversations] = useState([]);\n  const [conversation, setConversation] = useState({});\n  const [followingsUsers, setFollowingsUsers] = useState({});\n  const [conversationMessages, setConversationMessages] = useState([]);\n  const [arrivalMessage, setArrivalMessage] = useState(null);\n  const [usersConversationMessagesWith, setUsersConversationMessageWith] = useState([]);\n  const [usersConversationsWith, setUsersConversationsWith] = useState({});\n  const {\n    conversationId\n  } = useParams();\n  const messageRef = useRef();\n  const scrollRef = useRef();\n  useEffect(async () => {\n    let followingsUsersAv = Object.create(followingsUsers);\n    await Promise.all(context.user.followings.map(async userId => {\n      await Api.fetchUser(userId).then(res => {\n        followingsUsersAv[res.data._id] = res.data;\n      });\n    })).then(() => {\n      setFollowingsUsers(followingsUsersAv);\n    });\n  }, [context]);\n  useEffect(() => {\n    context.socket.on(\"getMessage\", data => {\n      setArrivalMessage({\n        senderId: data.senderId,\n        text: data.text,\n        createdAt: Date.now()\n      });\n    });\n  }, []);\n  useEffect(() => {\n    if (arrivalMessage && conversation && conversation._id) {\n      if (conversation.members.includes(arrivalMessage.senderId)) {\n        setConversationMessages(prev => [...prev, arrivalMessage]);\n      }\n    }\n  }, [arrivalMessage, conversation]);\n\n  const getUsersConversationWith = () => {\n    Promise.all(conversations.map(c => {\n      c.members.map(m => {\n        if (m != context.user._id) {\n          return Api.fetchUser(m).then(res => {\n            if (res.status == 200 && res.data._id) {\n              let usersConversationsWithAv = Object.create(usersConversationsWith);\n              let userIsConnected = false;\n              if (context.usersIsConnected.some(user => user.userId == res.data._id)) userIsConnected = true; // if (!Array.from(Object.values(usersConversationsWithAv)).some(uc => uc.conversationId == c._id)) {\n              //     usersConversationsWithAv[res.data._id] = {\n              //         user: res.data,\n              //         conversationId: c._id,\n              //         userIsConnected: userIsConnected\n              //     }\n              // }\n\n              usersConversationsWithAv[res.data._id] = {\n                user: res.data,\n                conversationId: c._id,\n                userIsConnected: userIsConnected\n              };\n              setUsersConversationsWith(prev => {\n                return { ...prev,\n                  ...usersConversationsWithAv\n                };\n              });\n            }\n          });\n        }\n      });\n    })).then(() => {});\n  };\n\n  const getConversation = async () => {\n    if (conversationId) {\n      await Api.getConversationByid(conversationId, context.user._id).then(async res => {\n        if (res.status == 200 && res.data) {\n          let usersConversationMessagesWithAv = Array.from(usersConversationMessagesWith);\n          await Promise.all(res.data.members.map(async mId => {\n            if (!usersConversationMessagesWithAv.some(value => value._id == mId)) {\n              await Api.fetchUser(mId).then(res => {\n                usersConversationMessagesWithAv.push(res.data);\n              });\n            }\n          })).then(() => {\n            setUsersConversationMessageWith(usersConversationMessagesWithAv);\n          });\n          setConversation(res.data);\n        }\n      });\n    }\n  };\n\n  const getConversationMessages = async () => {\n    if (conversation && conversation._id) {\n      const secondUser = conversation.members.filter(u => u != context.user._id);\n      Api.getConversationMessages(conversationId, context.user_id, secondUser).then(async res => {\n        if (res.status == 200 && res.data.length > 0) {\n          setConversationMessages(res.data);\n        }\n      });\n    }\n  };\n\n  const getUsersConversationMessagesWith = async () => {\n    // if (conversationMessages && conversationMessages.length > 0) {\n    conversationMessages.forEach(async cm => {\n      if (cm.senderId != context.user._id) {\n        await Api.fetchUser(cm.senderId).then(res => {\n          let usersConversationMessagesWithAv = Array.from(usersConversationMessagesWith);\n          usersConversationMessagesWithAv.push(res.data);\n          setUsersConversationMessageWith(usersConversationMessagesWithAv);\n        });\n        return;\n      }\n    }); // }\n  };\n\n  useEffect(async () => {\n    await Api.getUserConversations(context.user._id).then(res => {\n      setConversations(res.data);\n      getUsersConversationWith();\n    });\n    getConversation();\n  }, [conversationId]);\n  useEffect(() => {\n    getUsersConversationWith();\n  }, [conversations, context]);\n  useEffect(() => {\n    getConversationMessages();\n  }, [conversation]);\n  useEffect(() => {\n    var _scrollRef$current;\n\n    (_scrollRef$current = scrollRef.current) === null || _scrollRef$current === void 0 ? void 0 : _scrollRef$current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [conversationMessages]); // send message\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (conversation && conversation._id) {\n      let messageText = messageRef.current.value;\n\n      if (messageText && messageText.length > 0) {\n        Api.createMessage(conversation._id, context.user._id, messageText).then(res => {\n          getConversationMessages();\n          messageRef.current.value = \"\";\n        });\n        const receiverId = conversation.members.find(member => member != context.user._id);\n        context.socket.emit(\"sendMessage\", {\n          senderId: context.user._id,\n          receiverId: receiverId,\n          text: messageText\n        });\n      }\n    }\n  };\n\n  const handleNewConversation = async e => {\n    const username = e.target.textContent.trim();\n    await Api.fetchUser(username, \"username\").then(res => {\n      let userId = res.data._id;\n\n      try {\n        Api.getConversation(context.user._id, userId).then(resConv => {\n          if (resConv.status == 200 && resConv.data) {\n            history.push(`/chat/${resConv.data._id}`);\n          } else {\n            Api.createConversation(context.user._id, userId).then(resConv2 => {\n              if (resConv2.status == 200 && resConv2.data) history.push(`/chat/${resConv2.data._id}`);\n              setConversation(prev => [...prev, resConv2.data]);\n            });\n          }\n        });\n      } catch (err) {\n        Api.createConversation(context.user._id, userId).then(resConv => {\n          if (resConv.status == 200) history.push(`/chat/${resConv.data._id}`);\n          setConversation(prev => [...prev, resConv.data]);\n        });\n      }\n    });\n  };\n\n  function UserDev({\n    data,\n    conversationId\n  }) {\n    return /*#__PURE__*/_jsxDEV(Link, {\n      to: `/chat/${conversationId}`,\n      class: \"btn btn-light d-flex align-items-center position-relative mt-2\",\n      id: conversationId,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"profileImg\",\n        style: {\n          backgroundImage: `url(${data.user.profileImg})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"username position-relative\",\n        href: \"#\",\n        children: data.user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 17\n      }, this), function () {\n        if (data.isConnected == true) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"position-absolute top-0 start-100 translate-middle p-1 bg-success rounded-circle\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"visually-hidden\",\n              children: \"New alerts\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 33\n          }, this);\n        }\n      }()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }, this);\n  }\n\n  function UserBoxDev() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"nav flex-column nav-pills me-3\",\n      id: \"v-pills-tab\",\n      role: \"tablist\",\n      \"aria-orientation\": \"vertical\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        class: \"btn btn-warning mb-3\",\n        \"data-bs-toggle\": \"modal\",\n        \"data-bs-target\": \"#newConversationModal\",\n        children: /*#__PURE__*/_jsxDEV(AddCommentIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 130\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 17\n      }, this), Array.from(Object.values(usersConversationsWith)).map(uc => {\n        return /*#__PURE__*/_jsxDEV(UserDev, {\n          data: {\n            user: uc.user,\n            isConnected: uc.userIsConnected\n          },\n          conversationId: uc.conversationId\n        }, uc.user._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 32\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this);\n  }\n\n  function MessageDev({\n    message\n  }) {\n    let senderType = \"puT\";\n\n    if (message.senderId == context.user._id) {\n      senderType = \"puO\";\n    }\n\n    let user = usersConversationMessagesWith.filter(u => u._id == message.senderId)[0];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `msgbox ${senderType}`,\n      ref: scrollRef,\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        className: \"profileImg-sm\",\n        to: `/profile/${user.username}`,\n        style: {\n          backgroundImage: `url(${user.profileImg})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"msg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"msg-text\",\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"msg-time text-muted\",\n            children: format(message.createdAt)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 26\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }, this);\n  }\n\n  function MessageBoxDev() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"m-5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }, this), Array.from(Object.values(conversationMessages)).map(cm => {\n        return /*#__PURE__*/_jsxDEV(MessageDev, {\n          message: cm\n        }, cm._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 32\n        }, this);\n      }), conversation._id ? /*#__PURE__*/_jsxDEV(\"nav\", {\n        class: \"navbar position-fixed navbar-light bg-light mt-5 pb-sm-5 bg-body rounded nav-form\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          class: \"container-fluid\",\n          id: \"form_message\",\n          onSubmit: handleSubmit,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"input-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              name: \"message\",\n              id: \"message\",\n              rows: \"1\",\n              cols: \"80\",\n              class: \"form-control\",\n              placeholder: \"Message ....\",\n              autocomplete: \"off\",\n              spellcheck: \"false\",\n              required: true,\n              style: {\n                maxHeight: \"100px\"\n              },\n              ref: messageRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-warning\",\n              children: /*#__PURE__*/_jsxDEV(SendIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 69\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 25\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"position-relative h-100 \",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-light position-absolute\",\n          type: \"button\",\n          \"data-bs-toggle\": \"offcanvas\",\n          \"data-bs-target\": \"#offcanvasExample\",\n          \"aria-controls\": \"offcanvasExample\",\n          children: /*#__PURE__*/_jsxDEV(ListIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"aside\", {\n          className: \"bd-sidebar sticky-top m-3 d-none d-sm-block\",\n          children: /*#__PURE__*/_jsxDEV(\"nav\", {\n            className: \"navbar navbar-light bg-light bd-users-nav-chat shadow\",\n            style: {\n              borderRadius: \"1.25rem\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-3 mb-3\",\n              children: /*#__PURE__*/_jsxDEV(UserBoxDev, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 380,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"offcanvas offcanvas-start rounded\",\n        style: {\n          width: \"200px\"\n        },\n        tabindex: \"-1\",\n        id: \"offcanvasExample\",\n        \"aria-labelledby\": \"offcanvasExampleLabel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"offcanvas-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            class: \"offcanvas-title\",\n            id: \"offcanvasExampleLabel\",\n            children: \"Offcanvas\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            class: \"btn-close text-reset\",\n            \"data-bs-dismiss\": \"offcanvas\",\n            \"aria-label\": \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"offcanvas-body d-flex flex-column align-items-start\",\n          children: /*#__PURE__*/_jsxDEV(UserBoxDev, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"message_box\",\n          children: /*#__PURE__*/_jsxDEV(MessageBoxDev, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal fade\",\n      id: \"newConversationModal\",\n      tabIndex: \"-1\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog  modal-dialog-centered\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content custom-modal\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"exampleModalLabel\",\n              children: \"New Conversation\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn-close\",\n              \"data-bs-dismiss\": \"modal\",\n              \"aria-label\": \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"btn-group-vertical w-100\",\n              children: Array.from(Object.values(followingsUsers)).map(user => {\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-light\",\n                  onClick: handleNewConversation,\n                  \"data-bs-dismiss\": \"modal\",\n                  \"aria-label\": \"Close\",\n                  children: [\" \", user.username]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 48\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 423,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ChatBody, \"mzCV4QV2UXWMVbTCZv03SyITVZk=\", false, function () {\n  return [useHistory, useParams];\n});\n\n_c = ChatBody;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBody\");","map":{"version":3,"sources":["C:/Users/s3q/Documents/GitHub/medical-encyclopedia/medical-encyclopedia-app/src/components/ChatBody.jsx"],"names":["React","useContext","useState","useEffect","useRef","Link","useParams","useHistory","io","ChatStyle","SendIcon","ListIcon","AddCommentIcon","format","AuthContext","Api","ChatBody","context","history","conversations","setConversations","conversation","setConversation","followingsUsers","setFollowingsUsers","conversationMessages","setConversationMessages","arrivalMessage","setArrivalMessage","usersConversationMessagesWith","setUsersConversationMessageWith","usersConversationsWith","setUsersConversationsWith","conversationId","messageRef","scrollRef","followingsUsersAv","Object","create","Promise","all","user","followings","map","userId","fetchUser","then","res","data","_id","socket","on","senderId","text","createdAt","Date","now","members","includes","prev","getUsersConversationWith","c","m","status","usersConversationsWithAv","userIsConnected","usersIsConnected","some","getConversation","getConversationByid","usersConversationMessagesWithAv","Array","from","mId","value","push","getConversationMessages","secondUser","filter","u","user_id","length","getUsersConversationMessagesWith","forEach","cm","getUserConversations","current","scrollIntoView","behavior","handleSubmit","event","preventDefault","messageText","createMessage","receiverId","find","member","emit","handleNewConversation","e","username","target","textContent","trim","resConv","createConversation","resConv2","err","UserDev","backgroundImage","profileImg","isConnected","UserBoxDev","values","uc","MessageDev","message","senderType","MessageBoxDev","maxHeight","borderRadius","width"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SACIC,IADJ,EAEIC,SAFJ,EAGIC,UAHJ,QAKO,kBALP;AAOA,SAASC,EAAT,QAAmB,kBAAnB,C,CACA;AACA;;AAEA,OAAOC,SAAP,MAAsB,kBAAtB;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AAEA,SAASC,MAAT,QAAuB,YAAvB;AAGA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAOC,GAAP,MAAgB,kBAAhB;;AAGA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AAC/B,QAAMC,OAAO,GAAGhB,UAAU,CAACa,WAAD,CAA1B;AAEA,QAAMI,OAAO,GAAGX,UAAU,EAA1B,CAH+B,CAI/B;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM,CAACmB,YAAD,EAAeC,eAAf,IAAkCpB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACqB,eAAD,EAAkBC,kBAAlB,IAAwCtB,QAAQ,CAAC,EAAD,CAAtD;AAEA,QAAM,CAACuB,oBAAD,EAAuBC,uBAAvB,IAAkDxB,QAAQ,CAAC,EAAD,CAAhE;AACA,QAAM,CAACyB,cAAD,EAAiBC,iBAAjB,IAAsC1B,QAAQ,CAAC,IAAD,CAApD;AAGA,QAAM,CAAC2B,6BAAD,EAAgCC,+BAAhC,IAAmE5B,QAAQ,CAAC,EAAD,CAAjF;AAEA,QAAM,CAAC6B,sBAAD,EAAyBC,yBAAzB,IAAsD9B,QAAQ,CAAC,EAAD,CAApE;AACA,QAAM;AAAE+B,IAAAA;AAAF,MAAqB3B,SAAS,EAApC;AAEA,QAAM4B,UAAU,GAAG9B,MAAM,EAAzB;AACA,QAAM+B,SAAS,GAAG/B,MAAM,EAAxB;AAGAD,EAAAA,SAAS,CAAC,YAAY;AAClB,QAAIiC,iBAAiB,GAAGC,MAAM,CAACC,MAAP,CAAcf,eAAd,CAAxB;AACA,UAAMgB,OAAO,CAACC,GAAR,CAAYvB,OAAO,CAACwB,IAAR,CAAaC,UAAb,CAAwBC,GAAxB,CAA4B,MAAMC,MAAN,IAAgB;AAC1D,YAAM7B,GAAG,CAAC8B,SAAJ,CAAcD,MAAd,EAAsBE,IAAtB,CAA2BC,GAAG,IAAI;AACpCX,QAAAA,iBAAiB,CAACW,GAAG,CAACC,IAAJ,CAASC,GAAV,CAAjB,GAAkCF,GAAG,CAACC,IAAtC;AACH,OAFK,CAAN;AAGH,KAJiB,CAAZ,EAIFF,IAJE,CAIG,MAAM;AAEXtB,MAAAA,kBAAkB,CAACY,iBAAD,CAAlB;AACH,KAPK,CAAN;AASH,GAXQ,EAWN,CAACnB,OAAD,CAXM,CAAT;AAaAd,EAAAA,SAAS,CAAC,MAAM;AAEZc,IAAAA,OAAO,CAACiC,MAAR,CAAeC,EAAf,CAAkB,YAAlB,EAAgCH,IAAI,IAAI;AACpCpB,MAAAA,iBAAiB,CAAC;AACdwB,QAAAA,QAAQ,EAAEJ,IAAI,CAACI,QADD;AAEdC,QAAAA,IAAI,EAAEL,IAAI,CAACK,IAFG;AAGdC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAHG,OAAD,CAAjB;AAKH,KAND;AAQH,GAVQ,EAUN,EAVM,CAAT;AAYArD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwB,cAAc,IAAIN,YAAlB,IAAkCA,YAAY,CAAC4B,GAAnD,EAAwD;AACpD,UAAI5B,YAAY,CAACoC,OAAb,CAAqBC,QAArB,CAA8B/B,cAAc,CAACyB,QAA7C,CAAJ,EAA4D;AACxD1B,QAAAA,uBAAuB,CAACiC,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUhC,cAAV,CAAT,CAAvB;AACH;AACJ;AACJ,GANQ,EAMN,CAACA,cAAD,EAAiBN,YAAjB,CANM,CAAT;;AASA,QAAMuC,wBAAwB,GAAG,MAAM;AACnCrB,IAAAA,OAAO,CAACC,GAAR,CAAYrB,aAAa,CAACwB,GAAd,CAAkBkB,CAAC,IAAI;AAC/BA,MAAAA,CAAC,CAACJ,OAAF,CAAUd,GAAV,CAAcmB,CAAC,IAAI;AACf,YAAIA,CAAC,IAAI7C,OAAO,CAACwB,IAAR,CAAaQ,GAAtB,EAA2B;AACvB,iBAAOlC,GAAG,CAAC8B,SAAJ,CAAciB,CAAd,EAAiBhB,IAAjB,CAAsBC,GAAG,IAAI;AAChC,gBAAIA,GAAG,CAACgB,MAAJ,IAAc,GAAd,IAAqBhB,GAAG,CAACC,IAAJ,CAASC,GAAlC,EAAuC;AACnC,kBAAIe,wBAAwB,GAAG3B,MAAM,CAACC,MAAP,CAAcP,sBAAd,CAA/B;AAEA,kBAAIkC,eAAe,GAAG,KAAtB;AAEA,kBAAIhD,OAAO,CAACiD,gBAAR,CAAyBC,IAAzB,CAA8B1B,IAAI,IAAIA,IAAI,CAACG,MAAL,IAAeG,GAAG,CAACC,IAAJ,CAASC,GAA9D,CAAJ,EACIgB,eAAe,GAAG,IAAlB,CAN+B,CAQnC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAD,cAAAA,wBAAwB,CAACjB,GAAG,CAACC,IAAJ,CAASC,GAAV,CAAxB,GAAyC;AACrCR,gBAAAA,IAAI,EAAEM,GAAG,CAACC,IAD2B;AAErCf,gBAAAA,cAAc,EAAE4B,CAAC,CAACZ,GAFmB;AAGrCgB,gBAAAA,eAAe,EAAEA;AAHoB,eAAzC;AAOAjC,cAAAA,yBAAyB,CAAC2B,IAAI,IAAI;AAC9B,uBAAO,EAAC,GAAGA,IAAJ;AAAU,qBAAGK;AAAb,iBAAP;AACH,eAFwB,CAAzB;AAGH;AACJ,WA5BM,CAAP;AA6BH;AACJ,OAhCD;AAiCH,KAlCW,CAAZ,EAkCIlB,IAlCJ,CAkCS,MAAM,CAEd,CApCD;AAsCH,GAvCD;;AAyCA,QAAMsB,eAAe,GAAG,YAAY;AAChC,QAAInC,cAAJ,EAAoB;AAChB,YAAMlB,GAAG,CAACsD,mBAAJ,CAAwBpC,cAAxB,EAAwChB,OAAO,CAACwB,IAAR,CAAaQ,GAArD,EAA0DH,IAA1D,CAA+D,MAAMC,GAAN,IAAa;AAC9E,YAAIA,GAAG,CAACgB,MAAJ,IAAc,GAAd,IAAqBhB,GAAG,CAACC,IAA7B,EAAmC;AAC/B,cAAIsB,+BAA+B,GAAGC,KAAK,CAACC,IAAN,CAAW3C,6BAAX,CAAtC;AACA,gBAAMU,OAAO,CAACC,GAAR,CAAYO,GAAG,CAACC,IAAJ,CAASS,OAAT,CAAiBd,GAAjB,CAAqB,MAAM8B,GAAN,IAAa;AAChD,gBAAI,CAACH,+BAA+B,CAACH,IAAhC,CAAqCO,KAAK,IAAIA,KAAK,CAACzB,GAAN,IAAawB,GAA3D,CAAL,EAAsE;AAClE,oBAAM1D,GAAG,CAAC8B,SAAJ,CAAc4B,GAAd,EAAmB3B,IAAnB,CAAwBC,GAAG,IAAI;AACjCuB,gBAAAA,+BAA+B,CAACK,IAAhC,CAAqC5B,GAAG,CAACC,IAAzC;AACH,eAFK,CAAN;AAGH;AACJ,WANiB,CAAZ,EAMFF,IANE,CAMG,MAAM;AACXhB,YAAAA,+BAA+B,CAACwC,+BAAD,CAA/B;AACH,WARK,CAAN;AAUAhD,UAAAA,eAAe,CAACyB,GAAG,CAACC,IAAL,CAAf;AACH;AACJ,OAfK,CAAN;AAgBH;AACJ,GAnBD;;AAuBA,QAAM4B,uBAAuB,GAAG,YAAY;AACxC,QAAIvD,YAAY,IAAIA,YAAY,CAAC4B,GAAjC,EAAsC;AAClC,YAAM4B,UAAU,GAAGxD,YAAY,CAACoC,OAAb,CAAqBqB,MAArB,CAA4BC,CAAC,IAAIA,CAAC,IAAI9D,OAAO,CAACwB,IAAR,CAAaQ,GAAnD,CAAnB;AACAlC,MAAAA,GAAG,CAAC6D,uBAAJ,CAA4B3C,cAA5B,EAA4ChB,OAAO,CAAC+D,OAApD,EAA6DH,UAA7D,EAAyE/B,IAAzE,CAA8E,MAAMC,GAAN,IAAa;AACvF,YAAIA,GAAG,CAACgB,MAAJ,IAAc,GAAd,IAAqBhB,GAAG,CAACC,IAAJ,CAASiC,MAAT,GAAkB,CAA3C,EAA8C;AAC1CvD,UAAAA,uBAAuB,CAACqB,GAAG,CAACC,IAAL,CAAvB;AACH;AACJ,OAJD;AAKH;AACJ,GATD;;AAWA,QAAMkC,gCAAgC,GAAG,YAAY;AACjD;AACAzD,IAAAA,oBAAoB,CAAC0D,OAArB,CAA6B,MAAMC,EAAN,IAAY;AACrC,UAAIA,EAAE,CAAChC,QAAH,IAAenC,OAAO,CAACwB,IAAR,CAAaQ,GAAhC,EAAqC;AACjC,cAAMlC,GAAG,CAAC8B,SAAJ,CAAcuC,EAAE,CAAChC,QAAjB,EAA2BN,IAA3B,CAAgCC,GAAG,IAAI;AACzC,cAAIuB,+BAA+B,GAAGC,KAAK,CAACC,IAAN,CAAW3C,6BAAX,CAAtC;AACAyC,UAAAA,+BAA+B,CAACK,IAAhC,CAAqC5B,GAAG,CAACC,IAAzC;AACAlB,UAAAA,+BAA+B,CAACwC,+BAAD,CAA/B;AACH,SAJK,CAAN;AAKA;AACH;AACJ,KATD,EAFiD,CAYjD;AACH,GAbD;;AAiBAnE,EAAAA,SAAS,CAAC,YAAY;AAClB,UAAMY,GAAG,CAACsE,oBAAJ,CAAyBpE,OAAO,CAACwB,IAAR,CAAaQ,GAAtC,EAA2CH,IAA3C,CAAgDC,GAAG,IAAI;AACzD3B,MAAAA,gBAAgB,CAAC2B,GAAG,CAACC,IAAL,CAAhB;AAEAY,MAAAA,wBAAwB;AAC3B,KAJK,CAAN;AAKAQ,IAAAA,eAAe;AAClB,GAPQ,EAON,CAACnC,cAAD,CAPM,CAAT;AAUA9B,EAAAA,SAAS,CAAC,MAAM;AACZyD,IAAAA,wBAAwB;AAC3B,GAFQ,EAEN,CAACzC,aAAD,EAAgBF,OAAhB,CAFM,CAAT;AAIAd,EAAAA,SAAS,CAAC,MAAM;AACZyE,IAAAA,uBAAuB;AAC1B,GAFQ,EAEN,CAACvD,YAAD,CAFM,CAAT;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AAAA;;AACZ,0BAAAgC,SAAS,CAACmD,OAAV,0EAAmBC,cAAnB,CAAkC;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAlC;AACH,GAFQ,EAEN,CAAC/D,oBAAD,CAFM,CAAT,CAzL+B,CA+L/B;;AACA,QAAMgE,YAAY,GAAG,MAAOC,KAAP,IAAiB;AAClCA,IAAAA,KAAK,CAACC,cAAN;;AACA,QAAItE,YAAY,IAAIA,YAAY,CAAC4B,GAAjC,EAAsC;AAClC,UAAI2C,WAAW,GAAG1D,UAAU,CAACoD,OAAX,CAAmBZ,KAArC;;AACA,UAAIkB,WAAW,IAAIA,WAAW,CAACX,MAAZ,GAAqB,CAAxC,EAA2C;AAEvClE,QAAAA,GAAG,CAAC8E,aAAJ,CAAkBxE,YAAY,CAAC4B,GAA/B,EAAoChC,OAAO,CAACwB,IAAR,CAAaQ,GAAjD,EAAsD2C,WAAtD,EAAmE9C,IAAnE,CAAwEC,GAAG,IAAI;AAC3E6B,UAAAA,uBAAuB;AACvB1C,UAAAA,UAAU,CAACoD,OAAX,CAAmBZ,KAAnB,GAA2B,EAA3B;AACH,SAHD;AAKA,cAAMoB,UAAU,GAAGzE,YAAY,CAACoC,OAAb,CAAqBsC,IAArB,CAA0BC,MAAM,IAAIA,MAAM,IAAI/E,OAAO,CAACwB,IAAR,CAAaQ,GAA3D,CAAnB;AACAhC,QAAAA,OAAO,CAACiC,MAAR,CAAe+C,IAAf,CAAoB,aAApB,EAAmC;AAC/B7C,UAAAA,QAAQ,EAAEnC,OAAO,CAACwB,IAAR,CAAaQ,GADQ;AAE/B6C,UAAAA,UAAU,EAAEA,UAFmB;AAG/BzC,UAAAA,IAAI,EAAEuC;AAHyB,SAAnC;AAKH;AACJ;AACJ,GAnBD;;AAqBA,QAAMM,qBAAqB,GAAG,MAAOC,CAAP,IAAa;AACvC,UAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAF,CAASC,WAAT,CAAqBC,IAArB,EAAjB;AACA,UAAMxF,GAAG,CAAC8B,SAAJ,CAAcuD,QAAd,EAAwB,UAAxB,EAAoCtD,IAApC,CAAyCC,GAAG,IAAI;AAClD,UAAIH,MAAM,GAAGG,GAAG,CAACC,IAAJ,CAASC,GAAtB;;AACA,UAAI;AACAlC,QAAAA,GAAG,CAACqD,eAAJ,CAAoBnD,OAAO,CAACwB,IAAR,CAAaQ,GAAjC,EAAsCL,MAAtC,EAA8CE,IAA9C,CAAmD0D,OAAO,IAAI;AAC1D,cAAIA,OAAO,CAACzC,MAAR,IAAkB,GAAlB,IAAyByC,OAAO,CAACxD,IAArC,EAA2C;AACvC9B,YAAAA,OAAO,CAACyD,IAAR,CAAc,SAAQ6B,OAAO,CAACxD,IAAR,CAAaC,GAAI,EAAvC;AACH,WAFD,MAGK;AACDlC,YAAAA,GAAG,CAAC0F,kBAAJ,CAAuBxF,OAAO,CAACwB,IAAR,CAAaQ,GAApC,EAAyCL,MAAzC,EAAiDE,IAAjD,CAAsD4D,QAAQ,IAAI;AAC9D,kBAAIA,QAAQ,CAAC3C,MAAT,IAAmB,GAAnB,IAA0B2C,QAAQ,CAAC1D,IAAvC,EACI9B,OAAO,CAACyD,IAAR,CAAc,SAAQ+B,QAAQ,CAAC1D,IAAT,CAAcC,GAAI,EAAxC;AACJ3B,cAAAA,eAAe,CAACqC,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU+C,QAAQ,CAAC1D,IAAnB,CAAT,CAAf;AACH,aAJD;AAKH;AACJ,SAXD;AAYH,OAbD,CAaE,OAAO2D,GAAP,EAAY;AACV5F,QAAAA,GAAG,CAAC0F,kBAAJ,CAAuBxF,OAAO,CAACwB,IAAR,CAAaQ,GAApC,EAAyCL,MAAzC,EAAiDE,IAAjD,CAAsD0D,OAAO,IAAI;AAC7D,cAAIA,OAAO,CAACzC,MAAR,IAAkB,GAAtB,EACI7C,OAAO,CAACyD,IAAR,CAAc,SAAQ6B,OAAO,CAACxD,IAAR,CAAaC,GAAI,EAAvC;AACJ3B,UAAAA,eAAe,CAACqC,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAU6C,OAAO,CAACxD,IAAlB,CAAT,CAAf;AACH,SAJD;AAKH;AAEJ,KAvBK,CAAN;AAwBH,GA1BD;;AA6BA,WAAS4D,OAAT,CAAiB;AAAE5D,IAAAA,IAAF;AAAQf,IAAAA;AAAR,GAAjB,EAA2C;AACvC,wBACI,QAAC,IAAD;AAAM,MAAA,EAAE,EAAG,SAAQA,cAAe,EAAlC;AAAqC,MAAA,KAAK,EAAC,gEAA3C;AAA4G,MAAA,EAAE,EAAEA,cAAhH;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,YAAf;AAA4B,QAAA,KAAK,EAAE;AAAE4E,UAAAA,eAAe,EAAG,OAAM7D,IAAI,CAACP,IAAL,CAAUqE,UAAW;AAA/C;AAAnC;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAM,QAAA,SAAS,EAAC,4BAAhB;AAA6C,QAAA,IAAI,EAAC,GAAlD;AAAA,kBACK9D,IAAI,CAACP,IAAL,CAAU2D;AADf;AAAA;AAAA;AAAA;AAAA,cAHJ,EAQQ,YAAY;AACR,YAAIpD,IAAI,CAAC+D,WAAL,IAAoB,IAAxB,EAA8B;AAC1B,8BACI;AAAM,YAAA,SAAS,EAAC,kFAAhB;AAAA,mCACI;AAAM,cAAA,SAAS,EAAC,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADJ;AAKH;AACJ,OARD,EARR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsBH;;AAED,WAASC,UAAT,GAAsB;AAClB,wBACI;AAAK,MAAA,KAAK,EAAC,gCAAX;AAA4C,MAAA,EAAE,EAAC,aAA/C;AAA6D,MAAA,IAAI,EAAC,SAAlE;AAA4E,0BAAiB,UAA7F;AAAA,8BAEI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,KAAK,EAAC,sBAA5B;AAAmD,0BAAe,OAAlE;AAA0E,0BAAe,uBAAzF;AAAA,+BAAiH,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAjH;AAAA;AAAA;AAAA;AAAA,cAFJ,EAKQzC,KAAK,CAACC,IAAN,CAAWnC,MAAM,CAAC4E,MAAP,CAAclF,sBAAd,CAAX,EAAkDY,GAAlD,CAAsDuE,EAAE,IAAI;AACxD,4BAAO,QAAC,OAAD;AAAS,UAAA,IAAI,EAAE;AAAEzE,YAAAA,IAAI,EAAEyE,EAAE,CAACzE,IAAX;AAAiBsE,YAAAA,WAAW,EAAEG,EAAE,CAACjD;AAAjC,WAAf;AAAqF,UAAA,cAAc,EAAEiD,EAAE,CAACjF;AAAxG,WAAwEiF,EAAE,CAACzE,IAAH,CAAQQ,GAAhF;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAFD,CALR;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAaH;;AAED,WAASkE,UAAT,CAAoB;AAAEC,IAAAA;AAAF,GAApB,EAAiC;AAC7B,QAAIC,UAAU,GAAG,KAAjB;;AACA,QAAID,OAAO,CAAChE,QAAR,IAAoBnC,OAAO,CAACwB,IAAR,CAAaQ,GAArC,EAA0C;AACtCoE,MAAAA,UAAU,GAAG,KAAb;AACH;;AACD,QAAI5E,IAAI,GAAGZ,6BAA6B,CAACiD,MAA9B,CAAqCC,CAAC,IAAIA,CAAC,CAAC9B,GAAF,IAASmE,OAAO,CAAChE,QAA3D,EAAqE,CAArE,CAAX;AACA,wBACI;AAAK,MAAA,SAAS,EAAG,UAASiE,UAAW,EAArC;AAAwC,MAAA,GAAG,EAAElF,SAA7C;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAgC,QAAA,EAAE,EAAG,YAAWM,IAAI,CAAC2D,QAAS,EAA9D;AAAiE,QAAA,KAAK,EAAE;AAAES,UAAAA,eAAe,EAAG,OAAMpE,IAAI,CAACqE,UAAW;AAA1C;AAAxE;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCACI;AAAK,UAAA,SAAS,EAAC,UAAf;AAAA,oBACKM,OAAO,CAAC/D;AADb;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAA,iCAAK;AAAO,YAAA,SAAS,EAAC,qBAAjB;AAAA,sBAAwCxC,MAAM,CAACuG,OAAO,CAAC9D,SAAT;AAA9C;AAAA;AAAA;AAAA;AAAA;AAAL;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAED,WAASgE,aAAT,GAAyB;AAErB,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cAFJ,EAOQ/C,KAAK,CAACC,IAAN,CAAWnC,MAAM,CAAC4E,MAAP,CAAcxF,oBAAd,CAAX,EAAgDkB,GAAhD,CAAoDyC,EAAE,IAAI;AAEtD,4BAAO,QAAC,UAAD;AAAY,UAAA,OAAO,EAAEA;AAArB,WAA8BA,EAAE,CAACnC,GAAjC;AAAA;AAAA;AAAA;AAAA,gBAAP;AACH,OAHD,CAPR,EAeQ5B,YAAY,CAAC4B,GAAb,gBAEI;AAAK,QAAA,KAAK,EAAC,mFAAX;AAAA,+BACI;AAAM,UAAA,KAAK,EAAC,iBAAZ;AAA8B,UAAA,EAAE,EAAC,cAAjC;AAAgD,UAAA,QAAQ,EAAEwC,YAA1D;AAAA,iCAEI;AAAK,YAAA,KAAK,EAAC,aAAX;AAAA,oCAEI;AAAU,cAAA,IAAI,EAAC,MAAf;AAAsB,cAAA,IAAI,EAAC,SAA3B;AAAqC,cAAA,EAAE,EAAC,SAAxC;AAAkD,cAAA,IAAI,EAAC,GAAvD;AAA2D,cAAA,IAAI,EAAC,IAAhE;AAAqE,cAAA,KAAK,EAAC,cAA3E;AAA0F,cAAA,WAAW,EAAC,cAAtG;AAAqH,cAAA,YAAY,EAAC,KAAlI;AAAwI,cAAA,UAAU,EAAC,OAAnJ;AAA2J,cAAA,QAAQ,MAAnK;AAAoK,cAAA,KAAK,EAAE;AAAE8B,gBAAAA,SAAS,EAAE;AAAb,eAA3K;AAAmM,cAAA,GAAG,EAAErF;AAAxM;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI;AAAQ,cAAA,KAAK,EAAC,iBAAd;AAAA,qCAAgC,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFJ,GAaM,IA5Bd;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAmCH;;AAED,sBACI,QAAC,KAAD,CAAO,QAAP;AAAA,4BACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BAEI;AAAK,QAAA,SAAS,EAAC,0BAAf;AAAA,gCAEI;AAAQ,UAAA,KAAK,EAAC,iCAAd;AAAgD,UAAA,IAAI,EAAC,QAArD;AAA8D,4BAAe,WAA7E;AAAyF,4BAAe,mBAAxG;AAA4H,2BAAc,kBAA1I;AAAA,iCACI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAMI;AAAO,UAAA,SAAS,EAAC,6CAAjB;AAAA,iCACI;AAAK,YAAA,SAAS,EAAC,uDAAf;AAAuE,YAAA,KAAK,EAAE;AAAEsF,cAAAA,YAAY,EAAE;AAAhB,aAA9E;AAAA,mCACI;AAAK,cAAA,SAAS,EAAC,UAAf;AAAA,qCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAkBI;AAAK,QAAA,KAAK,EAAC,mCAAX;AAA+C,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAtD;AAA0E,QAAA,QAAQ,EAAC,IAAnF;AAAwF,QAAA,EAAE,EAAC,kBAA3F;AAA8G,2BAAgB,uBAA9H;AAAA,gCACI;AAAK,UAAA,KAAK,EAAC,kBAAX;AAAA,kCACI;AAAI,YAAA,KAAK,EAAC,iBAAV;AAA4B,YAAA,EAAE,EAAC,uBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,KAAK,EAAC,sBAA5B;AAAmD,+BAAgB,WAAnE;AAA+E,0BAAW;AAA1F;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAKI;AAAK,UAAA,KAAK,EAAC,qDAAX;AAAA,iCACI,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eA8BI,QAAC,KAAD,CAAO,QAAP;AAAA,6BACI;AAAK,QAAA,KAAK,EAAC,WAAX;AAAA,+BAEI;AAAK,UAAA,EAAE,EAAC,aAAR;AAAA,iCAKI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA9BJ,eA8CI;AAAK,MAAA,SAAS,EAAC,YAAf;AAA4B,MAAA,EAAE,EAAC,sBAA/B;AAAsD,MAAA,QAAQ,EAAC,IAA/D;AAAoE,qBAAY,MAAhF;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,4BAAf;AAAA,kCACI;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,oCACI;AAAI,cAAA,SAAS,EAAC,aAAd;AAA4B,cAAA,EAAE,EAAC,mBAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,WAAhC;AAA4C,iCAAgB,OAA5D;AAAoE,4BAAW;AAA/E;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAKI;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,mCAEI;AAAK,cAAA,KAAK,EAAC,0BAAX;AAAA,wBAGQlD,KAAK,CAACC,IAAN,CAAWnC,MAAM,CAAC4E,MAAP,CAAc1F,eAAd,CAAX,EAA2CoB,GAA3C,CAA+CF,IAAI,IAAI;AAEnD,oCAAO;AAAQ,kBAAA,SAAS,EAAC,eAAlB;AAAkC,kBAAA,OAAO,EAAEyD,qBAA3C;AAAkE,qCAAgB,OAAlF;AAA0F,gCAAW,OAArG;AAAA,kCAA+GzD,IAAI,CAAC2D,QAApH;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAP;AACH,eAHD;AAHR;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,kBALJ,eAmBI;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YA9CJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4EH;;GAjauBpF,Q;UAGJT,U,EAgCWD,S;;;KAnCPU,Q","sourcesContent":["import React, { useContext, useState, useEffect, useRef } from 'react'\r\nimport {\r\n    Link,\r\n    useParams,\r\n    useHistory\r\n\r\n} from 'react-router-dom';\r\n\r\nimport { io } from \"socket.io-client\"\r\n// import ChatAsideCss from './chatStyle/ChatAside.css'\r\n// import ChatBoxCss from './chatStyle/ChatBox.css'\r\n\r\nimport ChatStyle from './/ChatStyle.css'\r\n\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ListIcon from '@material-ui/icons/List';\r\nimport AddCommentIcon from '@material-ui/icons/AddComment';\r\n\r\nimport { format } from \"timeago.js\"\r\n\r\n\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport Api from '../functions/Api';\r\n\r\n\r\nexport default function ChatBody() {\r\n    const context = useContext(AuthContext)\r\n\r\n    const history = useHistory()\r\n    // ############# -- socket -- ##################\r\n\r\n    // const socket = useRef()\r\n\r\n    // useEffect(() => socket.current = io(\"ws://localhost:8900\"), [])\r\n\r\n    // const [usersIsConnected, setUsersIsConnected] = useState([])\r\n    // useEffect(() => {\r\n    // context.socket.on(\"usersIsConnected\", users => {\r\n    //     console.log(\"IS CON:\", users)\r\n    //     setUsersIsConnected(users)\r\n    //     getUsersConversationWith()\r\n    // })\r\n    //     console.log(context.usersIsConnected)\r\n    // }, [context])\r\n\r\n\r\n\r\n\r\n    const [conversations, setConversations] = useState([])\r\n\r\n    const [conversation, setConversation] = useState({})\r\n    const [followingsUsers, setFollowingsUsers] = useState({})\r\n\r\n    const [conversationMessages, setConversationMessages] = useState([])\r\n    const [arrivalMessage, setArrivalMessage] = useState(null)\r\n\r\n\r\n    const [usersConversationMessagesWith, setUsersConversationMessageWith] = useState([])\r\n\r\n    const [usersConversationsWith, setUsersConversationsWith] = useState({})\r\n    const { conversationId } = useParams()\r\n\r\n    const messageRef = useRef()\r\n    const scrollRef = useRef()\r\n\r\n\r\n    useEffect(async () => {\r\n        let followingsUsersAv = Object.create(followingsUsers)\r\n        await Promise.all(context.user.followings.map(async userId => {\r\n            await Api.fetchUser(userId).then(res => {\r\n                followingsUsersAv[res.data._id] = res.data\r\n            })\r\n        })).then(() => {\r\n\r\n            setFollowingsUsers(followingsUsersAv)\r\n        })\r\n\r\n    }, [context])\r\n\r\n    useEffect(() => {\r\n\r\n        context.socket.on(\"getMessage\", data => {\r\n            setArrivalMessage({\r\n                senderId: data.senderId,\r\n                text: data.text,\r\n                createdAt: Date.now()\r\n            })\r\n        })\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (arrivalMessage && conversation && conversation._id) {\r\n            if (conversation.members.includes(arrivalMessage.senderId)) {\r\n                setConversationMessages(prev => [...prev, arrivalMessage])\r\n            }\r\n        }\r\n    }, [arrivalMessage, conversation])\r\n\r\n\r\n    const getUsersConversationWith = () => {\r\n        Promise.all(conversations.map(c => {\r\n            c.members.map(m => {\r\n                if (m != context.user._id) {\r\n                    return Api.fetchUser(m).then(res => {\r\n                        if (res.status == 200 && res.data._id) {\r\n                            let usersConversationsWithAv = Object.create(usersConversationsWith)\r\n\r\n                            let userIsConnected = false\r\n\r\n                            if (context.usersIsConnected.some(user => user.userId == res.data._id))\r\n                                userIsConnected = true\r\n\r\n                            // if (!Array.from(Object.values(usersConversationsWithAv)).some(uc => uc.conversationId == c._id)) {\r\n                            //     usersConversationsWithAv[res.data._id] = {\r\n                            //         user: res.data,\r\n                            //         conversationId: c._id,\r\n                            //         userIsConnected: userIsConnected\r\n                            //     }\r\n                            // }\r\n\r\n                            usersConversationsWithAv[res.data._id] = {\r\n                                user: res.data,\r\n                                conversationId: c._id,\r\n                                userIsConnected: userIsConnected\r\n                            }\r\n\r\n\r\n                            setUsersConversationsWith(prev => {\r\n                                return {...prev, ...usersConversationsWithAv}\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n        })).then(() => {\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const getConversation = async () => {\r\n        if (conversationId) {\r\n            await Api.getConversationByid(conversationId, context.user._id).then(async res => {\r\n                if (res.status == 200 && res.data) {\r\n                    let usersConversationMessagesWithAv = Array.from(usersConversationMessagesWith)\r\n                    await Promise.all(res.data.members.map(async mId => {\r\n                        if (!usersConversationMessagesWithAv.some(value => value._id == mId)) {\r\n                            await Api.fetchUser(mId).then(res => {\r\n                                usersConversationMessagesWithAv.push(res.data)\r\n                            })\r\n                        }\r\n                    })).then(() => {\r\n                        setUsersConversationMessageWith(usersConversationMessagesWithAv)\r\n                    })\r\n\r\n                    setConversation(res.data)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const getConversationMessages = async () => {\r\n        if (conversation && conversation._id) {\r\n            const secondUser = conversation.members.filter(u => u != context.user._id)\r\n            Api.getConversationMessages(conversationId, context.user_id, secondUser).then(async res => {\r\n                if (res.status == 200 && res.data.length > 0) {\r\n                    setConversationMessages(res.data)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const getUsersConversationMessagesWith = async () => {\r\n        // if (conversationMessages && conversationMessages.length > 0) {\r\n        conversationMessages.forEach(async cm => {\r\n            if (cm.senderId != context.user._id) {\r\n                await Api.fetchUser(cm.senderId).then(res => {\r\n                    let usersConversationMessagesWithAv = Array.from(usersConversationMessagesWith)\r\n                    usersConversationMessagesWithAv.push(res.data)\r\n                    setUsersConversationMessageWith(usersConversationMessagesWithAv)\r\n                })\r\n                return\r\n            }\r\n        })\r\n        // }\r\n    }\r\n\r\n\r\n\r\n    useEffect(async () => {\r\n        await Api.getUserConversations(context.user._id).then(res => {\r\n            setConversations(res.data)\r\n\r\n            getUsersConversationWith()\r\n        })\r\n        getConversation()\r\n    }, [conversationId])\r\n\r\n\r\n    useEffect(() => {\r\n        getUsersConversationWith()\r\n    }, [conversations, context])\r\n\r\n    useEffect(() => {\r\n        getConversationMessages()\r\n    }, [conversation])\r\n\r\n    useEffect(() => {\r\n        scrollRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }, [conversationMessages])\r\n\r\n\r\n\r\n    // send message\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        if (conversation && conversation._id) {\r\n            let messageText = messageRef.current.value\r\n            if (messageText && messageText.length > 0) {\r\n\r\n                Api.createMessage(conversation._id, context.user._id, messageText).then(res => {\r\n                    getConversationMessages()\r\n                    messageRef.current.value = \"\"\r\n                })\r\n\r\n                const receiverId = conversation.members.find(member => member != context.user._id)\r\n                context.socket.emit(\"sendMessage\", {\r\n                    senderId: context.user._id,\r\n                    receiverId: receiverId,\r\n                    text: messageText\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleNewConversation = async (e) => {\r\n        const username = e.target.textContent.trim()\r\n        await Api.fetchUser(username, \"username\").then(res => {\r\n            let userId = res.data._id\r\n            try {\r\n                Api.getConversation(context.user._id, userId).then(resConv => {\r\n                    if (resConv.status == 200 && resConv.data) {\r\n                        history.push(`/chat/${resConv.data._id}`)\r\n                    }\r\n                    else {\r\n                        Api.createConversation(context.user._id, userId).then(resConv2 => {\r\n                            if (resConv2.status == 200 && resConv2.data)\r\n                                history.push(`/chat/${resConv2.data._id}`)\r\n                            setConversation(prev => [...prev, resConv2.data])\r\n                        })\r\n                    }\r\n                })\r\n            } catch (err) {\r\n                Api.createConversation(context.user._id, userId).then(resConv => {\r\n                    if (resConv.status == 200)\r\n                        history.push(`/chat/${resConv.data._id}`)\r\n                    setConversation(prev => [...prev, resConv.data])\r\n                })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n\r\n    function UserDev({ data, conversationId }) {\r\n        return (\r\n            <Link to={`/chat/${conversationId}`} class=\"btn btn-light d-flex align-items-center position-relative mt-2\" id={conversationId}>\r\n\r\n                <div className=\"profileImg\" style={{ backgroundImage: `url(${data.user.profileImg})` }}></div>\r\n                <span className=\"username position-relative\" href=\"#\">\r\n                    {data.user.username}\r\n                </span>\r\n\r\n                {\r\n                    function () {\r\n                        if (data.isConnected == true) {\r\n                            return (\r\n                                <span className=\"position-absolute top-0 start-100 translate-middle p-1 bg-success rounded-circle\">\r\n                                    <span className=\"visually-hidden\">New alerts</span>\r\n                                </span>\r\n                            )\r\n                        }\r\n                    }()\r\n                }\r\n\r\n            </Link>\r\n        )\r\n    }\r\n\r\n    function UserBoxDev() {\r\n        return (\r\n            <div class=\"nav flex-column nav-pills me-3\" id=\"v-pills-tab\" role=\"tablist\" aria-orientation=\"vertical\">\r\n\r\n                <button type=\"button\" class=\"btn btn-warning mb-3\" data-bs-toggle=\"modal\" data-bs-target=\"#newConversationModal\"><AddCommentIcon /></button>\r\n\r\n                {\r\n                    Array.from(Object.values(usersConversationsWith)).map(uc => {\r\n                        return <UserDev data={{ user: uc.user, isConnected: uc.userIsConnected }} key={uc.user._id} conversationId={uc.conversationId} />\r\n                    })\r\n                }\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function MessageDev({ message }) {\r\n        let senderType = \"puT\"\r\n        if (message.senderId == context.user._id) {\r\n            senderType = \"puO\"\r\n        }\r\n        let user = usersConversationMessagesWith.filter(u => u._id == message.senderId)[0]\r\n        return (\r\n            <div className={`msgbox ${senderType}`} ref={scrollRef}>\r\n                <Link className=\"profileImg-sm\" to={`/profile/${user.username}`} style={{ backgroundImage: `url(${user.profileImg})` }}></Link>\r\n                <div className=\"msg\">\r\n                    <div className=\"msg-text\">\r\n                        {message.text}\r\n                    </div>\r\n                    <div><small className=\"msg-time text-muted\">{format(message.createdAt)}</small></div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function MessageBoxDev() {\r\n\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className=\"m-5\">\r\n\r\n                </div>\r\n\r\n                {\r\n                    Array.from(Object.values(conversationMessages)).map(cm => {\r\n\r\n                        return <MessageDev message={cm} key={cm._id} />\r\n                    })\r\n                }\r\n\r\n\r\n                {\r\n                    conversation._id ?\r\n\r\n                        <nav class=\"navbar position-fixed navbar-light bg-light mt-5 pb-sm-5 bg-body rounded nav-form\">\r\n                            <form class=\"container-fluid\" id=\"form_message\" onSubmit={handleSubmit}>\r\n\r\n                                <div class=\"input-group\">\r\n                                    {/* <span class=\"input-group-text\">#</span> */}\r\n                                    <textarea type=\"text\" name=\"message\" id=\"message\" rows=\"1\" cols=\"80\" class=\"form-control\" placeholder=\"Message ....\" autocomplete=\"off\" spellcheck=\"false\" required style={{ maxHeight: \"100px\" }} ref={messageRef}></textarea>\r\n                                    <button class=\"btn btn-warning\"><SendIcon /></button>\r\n                                </div>\r\n\r\n                            </form>\r\n                        </nav>\r\n                        : null\r\n                }\r\n\r\n            </React.Fragment>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <React.Fragment>\r\n\r\n                <div className=\"position-relative h-100 \">\r\n\r\n                    <button class=\"btn btn-light position-absolute\" type=\"button\" data-bs-toggle=\"offcanvas\" data-bs-target=\"#offcanvasExample\" aria-controls=\"offcanvasExample\">\r\n                        <ListIcon />\r\n                    </button>\r\n\r\n                    <aside className=\"bd-sidebar sticky-top m-3 d-none d-sm-block\">\r\n                        <nav className=\"navbar navbar-light bg-light bd-users-nav-chat shadow\" style={{ borderRadius: \"1.25rem\" }}>\r\n                            <div className=\"p-3 mb-3\">\r\n                                <UserBoxDev />\r\n                            </div>\r\n                        </nav>\r\n                    </aside>\r\n                </div>\r\n\r\n\r\n                <div class=\"offcanvas offcanvas-start rounded\" style={{ width: \"200px\" }} tabindex=\"-1\" id=\"offcanvasExample\" aria-labelledby=\"offcanvasExampleLabel\">\r\n                    <div class=\"offcanvas-header\">\r\n                        <h5 class=\"offcanvas-title\" id=\"offcanvasExampleLabel\">Offcanvas</h5>\r\n                        <button type=\"button\" class=\"btn-close text-reset\" data-bs-dismiss=\"offcanvas\" aria-label=\"Close\"></button>\r\n                    </div>\r\n                    <div class=\"offcanvas-body d-flex flex-column align-items-start\">\r\n                        <UserBoxDev />\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n\r\n            <React.Fragment>\r\n                <div class=\"container\" >\r\n\r\n                    <div id=\"message_box\">\r\n\r\n                        {/* <div class=\"tab-content\" id=\"v-pills-tabContent\">\r\n\r\n                        </div> */}\r\n                        <MessageBoxDev />\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </React.Fragment>\r\n\r\n            <div className=\"modal fade\" id=\"newConversationModal\" tabIndex=\"-1\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog  modal-dialog-centered\">\r\n                    <div className=\"modal-content custom-modal\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"exampleModalLabel\">New Conversation</h5>\r\n                            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n\r\n                            <div class=\"btn-group-vertical w-100\">\r\n\r\n                                {\r\n                                    Array.from(Object.values(followingsUsers)).map(user => {\r\n\r\n                                        return <button className=\"btn btn-light\" onClick={handleNewConversation} data-bs-dismiss=\"modal\" aria-label=\"Close\"> {user.username}</button>\r\n                                    })\r\n                                }\r\n\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"modal-footer\">\r\n\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}