{"ast":null,"code":"import axios from \"axios\";\nimport url_join from \"url-join\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport constants from \"../constant/general\";\nconst {} = constants; // const proxy = \"http:/localhost:8800/api\"\n// const UPLOAD_USER_URL = process.env.REACT_APP_UPLOAD_USER_URL\n// const UPLOAD_POST_URL = process.env.REACT_APP_UPLOAD_POST_URL\n// const ALLOWED_IMG = [\"image/png\", \"image/jpeg\"]\n// const ALLOWED_IMG_SIZE = 8\n\nfunction addPathToMedia(obj, type) {\n  // if (type == \"post\" && obj._id && obj.img && obj.img != \"\") {\n  //     // obj.img = url_join(public_posts_url, obj.img)\n  // } else if (type == \"post\" && obj._id && obj.img == \"\") {\n  //     obj.img = url_join(public_default_url, \"post.jpg\")\n  // }\n  // if (type == \"user\" && obj._id && obj.profileImg && obj.profileImg != \"\") {\n  //     // obj.profileImg = url_join(public_users_url, obj._id, obj.img)\n  // } else if (type == \"user\" && obj._id && obj.profileImg == \"\") {\n  //     obj.profileImg = url_join(public_default_url, \"profile.jpg\")\n  // }\n  // if (type == \"user\" && obj._id && obj.coverImg && obj.coverImg != \"\") {\n  //     // obj.coverImg = url_join(public_users_url, obj._id, obj.coverImg)\n  // } else if (type == \"user\" && obj._id && obj.coverImg == \"\") {\n  //     obj.coverImg = url_join(public_default_url, \"cover.jpg\")\n  // }\n  return obj;\n}\n\nfunction reverseResArray(obj) {\n  if (Array.isArray(obj)) {\n    obj = obj.reverse();\n  }\n\n  return obj;\n} // ! AUTH API :\n\n\nconst registerUser = async userData => {\n  return await axios.post(`${proxy}/auth/register`, userData);\n};\n\nconst loginUser = async ({\n  userEmail,\n  userPassword\n}) => {\n  const res = await axios.post(`${proxy}/auth/login`, {\n    email: userEmail,\n    password: userPassword\n  });\n  res.data = addPathToMedia(res.data, \"user\");\n  return res;\n};\n\nconst saveLoginUser = async ({\n  userEmail,\n  userPassword\n}) => {\n  const res = await axios.post(`${proxy}/auth/save_login`, {\n    email: userEmail,\n    password: userPassword\n  });\n  res.data._id = res.data.user_id;\n  return res;\n};\n\nconst fetchSaveLoginUser = async (loginId, userId) => {\n  const res = await axios.post(`${proxy}/auth/auto_login`, {\n    loginId: loginId,\n    userId: userId\n  }); // res.data.session_id = res.data._id\n\n  res.data._id = userId;\n  return res;\n};\n\nconst deleteLoginUser = async (loginId, userId) => {\n  const res = await axios.delete(`${proxy}/auth/delete_login`, {\n    params: {\n      loginId: loginId,\n      userId: userId\n    }\n  }); // res.data.session_id = res.data._id\n\n  return res;\n};\n\nconst updateLoginUser = async (loginId, userId) => {\n  const res = await axios.put(`${proxy}/auth/update_login`, {\n    loginId: loginId,\n    userId: userId\n  }); // res.data.session_id = res.data._id\n\n  res.data._id = userId;\n  return res;\n}; // ! USER API : \n\n\nconst updateUser = async (id, _userId, updateData) => {\n  const {\n    userId,\n    createdAt,\n    updatedAt,\n    __v,\n    _id,\n    ..._updateData\n  } = updateData;\n  return await axios.put(`${proxy}/users/${id}`, {\n    userId: _userId,\n    ..._updateData\n  });\n};\n\nconst updateUserImg = async (id, _userId, updateData, formData) => {\n  const {\n    userId,\n    createdAt,\n    updatedAt,\n    __v,\n    _id,\n    ..._updateData\n  } = updateData; // const files = formData.get(\"file\")\n\n  const coverImg = formData.get(\"coverImg\");\n  const profileImg = formData.get(\"profileImg\");\n  const files = [profileImg, coverImg];\n  console.log(files);\n  files.forEach(file => {\n    const newFormData = new FormData();\n    newFormData.append(\"file\", file);\n\n    if (file) {\n      console.log(file);\n      const fileSize = file.size / 1000 / 1000;\n\n      if (fileSize < ALLOWED_IMG_SIZE && ALLOWED_IMG.includes(file.type)) {\n        const fileMimeType = file.type.split(\"/\")[1];\n        const fileName = `${uuidv4()}.${fileMimeType}`;\n        const filePath = url_join(UPLOAD_USER_URL, _userId, fileName);\n        console.log(filePath); // postData.img = filePath\n\n        _updateData[file.id] = filePath;\n        uploadUserImage(fileName, _userId, newFormData).then(async res => {\n          console.log(res);\n          if (res.status == 200) return await axios.put(`${proxy}/users/${id}/set_img`, {\n            userId: _userId,\n            ..._updateData\n          });\n        });\n      }\n    }\n  });\n};\n\nconst deleteUser = async (id, userId) => {\n  return await axios.delete(`${proxy}/users/${id}`, {\n    params: {\n      userId: userId\n    }\n  });\n};\n\nconst fetchUser = async (id_user, type = \"id\") => {\n  const res = await axios.get(`${proxy}/users/${id_user}/${type}`);\n  res.data = addPathToMedia(res.data, \"user\");\n  return res;\n};\n\nconst followUser = async (id, userId) => {\n  return await axios.put(`${proxy}/users/${id}/follow`, {\n    userId: userId\n  });\n};\n\nconst unfollowUser = async (id, userId) => {\n  return await axios.put(`${proxy}/users/${id}/unfollow`, {\n    userId: userId\n  });\n};\n\nconst fetchAllUsers = async () => {\n  const res = await axios.get(`${proxy}/users/get_all_users`); // res.data = reverseResArray(res.data)\n  // res.data.map(resData => {\n  //     resData = addPathToMedia(resData, \"user\")\n  // })\n\n  return res;\n}; // ! POST API :\n\n\nconst createPost = async (postData, formData) => {\n  const file = formData.get(\"file\");\n  console.log(postData, file);\n\n  if (file) {\n    const fileSize = file.size / 1000 / 1000;\n\n    if (fileSize < ALLOWED_IMG_SIZE && ALLOWED_IMG.includes(file.type)) {\n      const fileMimeType = file.type.split(\"/\")[1];\n      const fileName = `${uuidv4()}.${fileMimeType}`;\n      const filePath = url_join(UPLOAD_POST_URL, postData.userId, \"images\", fileName);\n      postData.img = filePath;\n      await uploadPostImage(fileName, postData.userId, formData).then(async res => {\n        console.log(res);\n        if (res.status == 200) return await axios.post(`${proxy}/posts/`, postData);\n      });\n    }\n  }\n};\n\nconst updatePost = async (id, _userId, updateData) => {\n  const {\n    userId,\n    createdAt,\n    updatedAt,\n    __v,\n    _id,\n    ..._updateData\n  } = updateData;\n  return await axios.put(`${proxy}/posts/${id}`, {\n    userId: _userId,\n    ..._updateData\n  });\n};\n\nconst updatePostImg = async (id, _userId, updateData) => {\n  const {\n    userId,\n    createdAt,\n    updatedAt,\n    __v,\n    _id,\n    ..._updateData\n  } = updateData;\n  return await axios.put(`${proxy}/posts/${id}/set_img`, {\n    userId: _userId,\n    ..._updateData\n  });\n};\n\nconst deletePost = async (id, userId) => {\n  return await axios.delete(`${proxy}/posts/${id}`, {\n    params: {\n      userId: userId\n    }\n  });\n};\n\nconst likePost = async (id, userId) => {\n  return await axios.put(`${proxy}/posts/${id}/like`, {\n    userId: userId\n  });\n};\n\nconst fetchPost = async id => {\n  const res = await axios.get(`${proxy}/posts/${id}`);\n  res.data = addPathToMedia(res.data, \"post\");\n  return res;\n};\n\nconst fetchUserPosts = async userId => {\n  const res = await axios.get(`${proxy}/posts/timeline/user/${userId}`);\n  res.data = reverseResArray(res.data);\n  res.data.map(resData => {\n    resData = addPathToMedia(resData, \"post\");\n  });\n  return res;\n};\n\nconst fetchUserPostsId = async userId => {\n  const res = await axios.get(`${proxy}/posts/timeline/user_posts_id/${userId}`);\n  res.data = reverseResArray(res.data);\n  res.data.map(resData => {\n    resData = addPathToMedia(resData, \"post\");\n  });\n  return res;\n};\n\nconst fetchFuserPosts = async userId => {\n  const res = await axios.get(`${proxy}/posts/timeline/fuser/${userId}`);\n  res.data = reverseResArray(res.data);\n  res.data.map(resData => {\n    resData = addPathToMedia(resData, \"post\");\n  });\n  return res;\n};\n\nconst fetchFuserPostsId = async userId => {\n  const res = await axios.get(`${proxy}/posts/timeline/fuser_posts_id/${userId}`);\n  res.data = reverseResArray(res.data);\n  res.data.map(resData => {\n    resData = addPathToMedia(resData, \"post\");\n  });\n  return res;\n};\n\nconst fetchAllPosts = async userId => {\n  const res = await axios.get(`${proxy}/posts/timeline/all/${userId}`);\n  res.data = reverseResArray(res.data);\n  res.data.map(resData => {\n    resData = addPathToMedia(resData, \"post\");\n  });\n  return res;\n};\n\nconst fetchAllPostsId = async userId => {\n  const res = await axios.get(`${proxy}/posts/timeline/all_posts_id/${userId}`);\n  res.data = reverseResArray(res.data);\n  res.data.map(resData => {\n    resData = addPathToMedia(resData, \"post\");\n  });\n  return res;\n}; // ! UPLOAD :\n\n\nconst uploadPostImage = async (filename, userId, formData) => {\n  return await axios.post(`${proxy}/upload/post/${userId}/${filename}`, formData);\n};\n\nconst uploadUserImage = async (filename, userId, formData) => {\n  return await axios.post(`${proxy}/upload/user/${userId}/${filename}`, formData);\n}; // ! CONVERSATION :\n\n\nconst createConversation = async (senderId, receiverId) => {\n  const res = await axios.post(`${proxy}/conversation`, {\n    senderId: senderId,\n    receiverId: receiverId\n  });\n  return res;\n};\n\nconst getConversation = async (currentUser, secondUser) => {\n  const res = await axios.get(`${proxy}/conversation/${currentUser}/${secondUser}`);\n  return res;\n};\n\nconst getConversationByid = async (conversationId, currentUser) => {\n  const res = await axios.post(`${proxy}/conversation/conv/${conversationId}`, {\n    currentUser: currentUser\n  });\n  return res;\n};\n\nconst getUserConversations = async userId => {\n  const res = await axios.get(`${proxy}/conversation/user/${userId}`);\n  return res;\n}; // ! MESSAGE :\n\n\nconst createMessage = async (conversationId, senderId, text) => {\n  const res = await axios.post(`${proxy}/message`, {\n    conversationId: conversationId,\n    senderId: senderId,\n    text: text\n  });\n  return res;\n};\n\nconst getConversationMessages = async (conversationId, currentUser, secondUser) => {\n  const res = await axios.post(`${proxy}/message/${conversationId}`, {\n    currentUser: currentUser,\n    secondUser: secondUser\n  });\n  return res;\n};\n\nexport default {\n  registerUser,\n  loginUser,\n  saveLoginUser,\n  fetchSaveLoginUser,\n  deleteLoginUser,\n  updateLoginUser,\n  updateUser,\n  updateUserImg,\n  deleteUser,\n  followUser,\n  unfollowUser,\n  fetchUser,\n  fetchAllUsers,\n  createPost,\n  updatePost,\n  updatePostImg,\n  deletePost,\n  likePost,\n  fetchPost,\n  fetchUserPosts,\n  fetchFuserPosts,\n  fetchAllPosts,\n  fetchUserPostsId,\n  fetchFuserPostsId,\n  fetchAllPostsId,\n  uploadPostImage,\n  uploadUserImage,\n  createConversation,\n  getConversation,\n  getConversationByid,\n  getUserConversations,\n  createMessage,\n  getConversationMessages\n};","map":{"version":3,"sources":["C:/Users/s3q/Documents/GitHub/medical-encyclopedia/medical-encyclopedia-app/src/functions/Api.js"],"names":["axios","url_join","v4","uuidv4","constants","addPathToMedia","obj","type","reverseResArray","Array","isArray","reverse","registerUser","userData","post","proxy","loginUser","userEmail","userPassword","res","email","password","data","saveLoginUser","_id","user_id","fetchSaveLoginUser","loginId","userId","deleteLoginUser","delete","params","updateLoginUser","put","updateUser","id","_userId","updateData","createdAt","updatedAt","__v","_updateData","updateUserImg","formData","coverImg","get","profileImg","files","console","log","forEach","file","newFormData","FormData","append","fileSize","size","ALLOWED_IMG_SIZE","ALLOWED_IMG","includes","fileMimeType","split","fileName","filePath","UPLOAD_USER_URL","uploadUserImage","then","status","deleteUser","fetchUser","id_user","followUser","unfollowUser","fetchAllUsers","createPost","postData","UPLOAD_POST_URL","img","uploadPostImage","updatePost","updatePostImg","deletePost","likePost","fetchPost","fetchUserPosts","map","resData","fetchUserPostsId","fetchFuserPosts","fetchFuserPostsId","fetchAllPosts","fetchAllPostsId","filename","createConversation","senderId","receiverId","getConversation","currentUser","secondUser","getConversationByid","conversationId","getUserConversations","createMessage","text","getConversationMessages"],"mappings":"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","sourcesContent":["import axios from \"axios\"\r\nimport url_join from \"url-join\"\r\nimport { v4 as uuidv4 } from \"uuid\"\r\n\r\nimport constants from \"../constant/general\";\r\n\r\nconst {} = constants;\r\n// const proxy = \"http:/localhost:8800/api\"\r\n\r\n// const UPLOAD_USER_URL = process.env.REACT_APP_UPLOAD_USER_URL\r\n// const UPLOAD_POST_URL = process.env.REACT_APP_UPLOAD_POST_URL\r\n\r\n\r\n// const ALLOWED_IMG = [\"image/png\", \"image/jpeg\"]\r\n// const ALLOWED_IMG_SIZE = 8\r\n\r\n\r\nfunction addPathToMedia(obj, type) {\r\n    // if (type == \"post\" && obj._id && obj.img && obj.img != \"\") {\r\n    //     // obj.img = url_join(public_posts_url, obj.img)\r\n    // } else if (type == \"post\" && obj._id && obj.img == \"\") {\r\n    //     obj.img = url_join(public_default_url, \"post.jpg\")\r\n    // }\r\n\r\n    // if (type == \"user\" && obj._id && obj.profileImg && obj.profileImg != \"\") {\r\n    //     // obj.profileImg = url_join(public_users_url, obj._id, obj.img)\r\n    // } else if (type == \"user\" && obj._id && obj.profileImg == \"\") {\r\n    //     obj.profileImg = url_join(public_default_url, \"profile.jpg\")\r\n    // }\r\n    // if (type == \"user\" && obj._id && obj.coverImg && obj.coverImg != \"\") {\r\n    //     // obj.coverImg = url_join(public_users_url, obj._id, obj.coverImg)\r\n\r\n    // } else if (type == \"user\" && obj._id && obj.coverImg == \"\") {\r\n\r\n    //     obj.coverImg = url_join(public_default_url, \"cover.jpg\")\r\n    // }\r\n\r\n\r\n    return obj\r\n}\r\n\r\nfunction reverseResArray(obj) {\r\n\r\n    if (Array.isArray(obj)) {\r\n        obj = obj.reverse()\r\n    }\r\n\r\n    return obj\r\n}\r\n\r\n// ! AUTH API :\r\nconst registerUser = async (userData) => {\r\n    return await axios.post(`${proxy}/auth/register`, userData)\r\n}\r\n\r\nconst loginUser = async ({ userEmail, userPassword }) => {\r\n    const res = await axios.post(`${proxy}/auth/login`, { email: userEmail, password: userPassword })\r\n    res.data = addPathToMedia(res.data, \"user\")\r\n    return res\r\n}\r\n\r\n\r\nconst saveLoginUser = async ({ userEmail, userPassword }) => {\r\n    const res = await axios.post(`${proxy}/auth/save_login`, { email: userEmail, password: userPassword })\r\n    res.data._id = res.data.user_id\r\n    return res\r\n}\r\n\r\n\r\n\r\nconst fetchSaveLoginUser = async (loginId, userId) => {\r\n\r\n    const res = await axios.post(`${proxy}/auth/auto_login`, { loginId: loginId, userId: userId })\r\n    // res.data.session_id = res.data._id\r\n    res.data._id = userId\r\n    return res\r\n\r\n}\r\n\r\n\r\n\r\nconst deleteLoginUser = async (loginId, userId) => {\r\n\r\n    const res = await axios.delete(`${proxy}/auth/delete_login`, { params: { loginId: loginId, userId: userId } })\r\n    // res.data.session_id = res.data._id\r\n    return res\r\n\r\n}\r\n\r\n\r\nconst updateLoginUser = async (loginId, userId) => {\r\n\r\n    const res = await axios.put(`${proxy}/auth/update_login`, { loginId: loginId, userId: userId })\r\n    // res.data.session_id = res.data._id\r\n    res.data._id = userId\r\n    return res\r\n\r\n}\r\n\r\n\r\n\r\n// ! USER API : \r\nconst updateUser = async (id, _userId, updateData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n\r\n    return await axios.put(`${proxy}/users/${id}`, { userId: _userId, ..._updateData })\r\n\r\n}\r\n\r\nconst updateUserImg = async (id, _userId, updateData, formData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n\r\n    // const files = formData.get(\"file\")\r\n    const coverImg = formData.get(\"coverImg\")\r\n    const profileImg = formData.get(\"profileImg\")\r\n    const files = [profileImg, coverImg]\r\n    console.log(files)\r\n    files.forEach(file => {\r\n        const newFormData = new FormData()\r\n        newFormData.append(\"file\", file)\r\n\r\n        if (file) {\r\n            console.log(file)\r\n            const fileSize = file.size / 1000 / 1000\r\n\r\n            if (fileSize < ALLOWED_IMG_SIZE && ALLOWED_IMG.includes(file.type)) {\r\n                const fileMimeType = file.type.split(\"/\")[1]\r\n                const fileName = `${uuidv4()}.${fileMimeType}`\r\n\r\n                const filePath = url_join(UPLOAD_USER_URL, _userId, fileName)\r\n                console.log(filePath)\r\n\r\n                // postData.img = filePath\r\n                _updateData[file.id] = filePath\r\n\r\n                uploadUserImage(fileName, _userId, newFormData).then(async res => {\r\n                    console.log(res)\r\n                    if (res.status == 200)\r\n                        return await axios.put(`${proxy}/users/${id}/set_img`, { userId: _userId, ..._updateData })\r\n                })\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n}\r\n\r\n\r\nconst deleteUser = async (id, userId) => {\r\n    return await axios.delete(`${proxy}/users/${id}`, { params: { userId: userId } })\r\n}\r\n\r\nconst fetchUser = async (id_user, type = \"id\") => {\r\n    const res = await axios.get(`${proxy}/users/${id_user}/${type}`)\r\n    res.data = addPathToMedia(res.data, \"user\")\r\n    return res\r\n}\r\n\r\n\r\nconst followUser = async (id, userId) => {\r\n    return await axios.put(`${proxy}/users/${id}/follow`, { userId: userId })\r\n}\r\n\r\n\r\nconst unfollowUser = async (id, userId) => {\r\n    return await axios.put(`${proxy}/users/${id}/unfollow`, { userId: userId })\r\n}\r\n\r\nconst fetchAllUsers = async () => {\r\n    const res = await axios.get(`${proxy}/users/get_all_users`)\r\n    // res.data = reverseResArray(res.data)\r\n    // res.data.map(resData => {\r\n    //     resData = addPathToMedia(resData, \"user\")\r\n    // })\r\n    return res\r\n}\r\n\r\n\r\n// ! POST API :\r\nconst createPost = async (postData, formData) => {\r\n    const file = formData.get(\"file\")\r\n    console.log(postData, file)\r\n    if (file) {\r\n        const fileSize = file.size / 1000 / 1000\r\n\r\n        if (fileSize < ALLOWED_IMG_SIZE && ALLOWED_IMG.includes(file.type)) {\r\n            const fileMimeType = file.type.split(\"/\")[1]\r\n            const fileName = `${uuidv4()}.${fileMimeType}`\r\n\r\n            const filePath = url_join(UPLOAD_POST_URL, postData.userId, \"images\", fileName)\r\n\r\n            postData.img = filePath\r\n\r\n            await uploadPostImage(fileName, postData.userId, formData).then(async res => {\r\n                console.log(res)\r\n                if (res.status == 200)\r\n                    return await axios.post(`${proxy}/posts/`, postData)\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst updatePost = async (id, _userId, updateData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n    return await axios.put(`${proxy}/posts/${id}`, { userId: _userId, ..._updateData })\r\n}\r\n\r\nconst updatePostImg = async (id, _userId, updateData) => {\r\n    const { userId, createdAt, updatedAt, __v, _id, ..._updateData } = updateData\r\n    return await axios.put(`${proxy}/posts/${id}/set_img`, { userId: _userId, ..._updateData })\r\n}\r\n\r\nconst deletePost = async (id, userId) => {\r\n    return await axios.delete(`${proxy}/posts/${id}`, { params: { userId: userId } })\r\n}\r\n\r\n\r\nconst likePost = async (id, userId) => {\r\n    return await axios.put(`${proxy}/posts/${id}/like`, { userId: userId })\r\n}\r\n\r\n\r\nconst fetchPost = async (id) => {\r\n    const res = await axios.get(`${proxy}/posts/${id}`)\r\n    res.data = addPathToMedia(res.data, \"post\")\r\n    return res\r\n}\r\n\r\n\r\nconst fetchUserPosts = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/user/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\n\r\nconst fetchUserPostsId = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/user_posts_id/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\nconst fetchFuserPosts = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/fuser/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\nconst fetchFuserPostsId = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/fuser_posts_id/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\n\r\nconst fetchAllPosts = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/all/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\nconst fetchAllPostsId = async (userId) => {\r\n    const res = await axios.get(`${proxy}/posts/timeline/all_posts_id/${userId}`)\r\n    res.data = reverseResArray(res.data)\r\n    res.data.map(resData => {\r\n        resData = addPathToMedia(resData, \"post\")\r\n    })\r\n    return res\r\n}\r\n\r\n\r\n// ! UPLOAD :\r\n\r\nconst uploadPostImage = async (filename, userId, formData) => {\r\n    return await axios.post(`${proxy}/upload/post/${userId}/${filename}`, formData)\r\n}\r\n\r\nconst uploadUserImage = async (filename, userId, formData) => {\r\n    return await axios.post(`${proxy}/upload/user/${userId}/${filename}`, formData)\r\n}\r\n\r\n\r\n// ! CONVERSATION :\r\nconst createConversation = async (senderId, receiverId) => {\r\n    const res = await axios.post(`${proxy}/conversation`, { senderId: senderId, receiverId: receiverId })\r\n    return res\r\n}\r\n\r\nconst getConversation = async (currentUser, secondUser) => {\r\n    const res = await axios.get(`${proxy}/conversation/${currentUser}/${secondUser}`)\r\n    return res\r\n}\r\n\r\n\r\nconst getConversationByid = async (conversationId, currentUser) => {\r\n    const res = await axios.post(`${proxy}/conversation/conv/${conversationId}`, { currentUser: currentUser})\r\n    return res\r\n}\r\n\r\nconst getUserConversations = async (userId) => {\r\n    const res = await axios.get(`${proxy}/conversation/user/${userId}`)\r\n    return res\r\n}\r\n\r\n// ! MESSAGE :\r\nconst createMessage = async (conversationId, senderId, text) => {\r\n    const res = await axios.post(`${proxy}/message`, { conversationId: conversationId, senderId: senderId, text: text })\r\n    return res\r\n}\r\n\r\nconst getConversationMessages = async (conversationId, currentUser, secondUser) => {\r\n    const res = await axios.post(`${proxy}/message/${conversationId}`, { currentUser: currentUser, secondUser: secondUser })\r\n    return res\r\n}\r\n\r\n\r\nexport default {\r\n    registerUser,\r\n    loginUser,\r\n    saveLoginUser,\r\n    fetchSaveLoginUser,\r\n    deleteLoginUser,\r\n    updateLoginUser,\r\n\r\n    updateUser,\r\n    updateUserImg,\r\n    deleteUser,\r\n    followUser,\r\n    unfollowUser,\r\n\r\n    fetchUser,\r\n    fetchAllUsers,\r\n\r\n    createPost,\r\n    updatePost,\r\n    updatePostImg,\r\n    deletePost,\r\n    likePost,\r\n\r\n    fetchPost,\r\n    fetchUserPosts,\r\n    fetchFuserPosts,\r\n    fetchAllPosts,\r\n    fetchUserPostsId,\r\n    fetchFuserPostsId,\r\n    fetchAllPostsId,\r\n\r\n    uploadPostImage,\r\n    uploadUserImage,\r\n\r\n    createConversation,\r\n    getConversation,\r\n    getConversationByid,\r\n    getUserConversations,\r\n\r\n    createMessage,\r\n    getConversationMessages,\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}