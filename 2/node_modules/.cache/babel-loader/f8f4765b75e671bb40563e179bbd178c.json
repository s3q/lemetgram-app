{"ast":null,"code":"(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","map":{"version":3,"sources":["C:/Users/s3q/node_modules/url-join/lib/url-join.js"],"names":["name","context","definition","module","exports","define","amd","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","push","str","join","parts","split","input","arguments","slice","call"],"mappings":"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","sourcesContent":["(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();\n  else if (typeof define === 'function' && define.amd) define(definition);\n  else context[name] = definition();\n})('urljoin', this, function () {\n\n  function normalize (strArray) {\n    var resultArray = [];\n    if (strArray.length === 0) { return ''; }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    }\n\n    // If the first part is a plain protocol, we combine it with the next part.\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    }\n\n    // There must be two or three slashes in the file protocol, two slashes in anything else.\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') { continue; }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n\n    }\n\n    var str = resultArray.join('/');\n    // Each input component is now separated by a single slash except the possible first plain protocol part.\n\n    // remove trailing slash before parameters or hash\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1');\n\n    // replace ? in parameters with &\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');\n\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n\n});\n"]},"metadata":{},"sourceType":"script"}