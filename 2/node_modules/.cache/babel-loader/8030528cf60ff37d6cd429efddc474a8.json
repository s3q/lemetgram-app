{"ast":null,"code":"import Api from \"./functions/Api\";\nimport Browser from \"./functions/Browser\";\nexport const autoLoginApiContext = async dispatch => {\n  const loginId = Browser.getCookie(\"loginId\");\n  const userId = Browser.getCookie(\"userId\");\n  console.log(loginId, userId);\n\n  if (userId && loginId) {\n    await Api.fetchSaveLoginUser(loginId, userId).then(res => {\n      if (res.status == 200 && res.data && res.data != {}) {\n        dispatch({\n          type: \"LOGIN_SUCCESS\",\n          payload: res.data\n        }); // let lastUrlVistedArray = Browser.getHistoryUrl()\n        // console.log(lastUrlVistedArray)\n        // let lastUrlVisted = lastUrlVistedArray[lastUrlVistedArray.length - 1]\n        // console.log(lastUrlVisted, window.location.href, lastUrlVisted != window.location.href)\n        // if (lastUrlVisted != window.location.href) {\n        //     window.location.href = lastUrlVisted\n        // }\n        // else {\n        //     window.location.href = window.location.host\n        // }\n      } else {\n        dispatch({\n          type: \"LOGIN_FAILURE\",\n          payload: {}\n        });\n        window.location.pathname = \"/login\";\n      }\n    });\n  }\n};\nexport const updateLoginApiContext = async dispatch => {\n  const loginId = Browser.getCookie(\"loginId\");\n  const userId = Browser.getCookie(\"userId\");\n\n  if (userId && loginId) {\n    await Api.updateLoginUser(loginId, userId).then(res => {\n      dispatch({\n        type: \"UPDATE_LOGIN\",\n        payload: res.data\n      });\n    });\n  }\n};\nexport const loginApiContext = async (userCredentials, dispatch) => {\n  dispatch({\n    type: \"LOGIN_START\"\n  });\n\n  try {\n    const res = await Api.loginUser(userCredentials).then(res => {\n      dispatch({\n        type: \"LOGIN_SUCCESS\",\n        payload: res.data\n      });\n      Api.saveLoginUser(userCredentials).then(resLogin => {\n        Browser.setCookie(\"loginId\", resLogin.data.login_id, 10);\n        Browser.setCookie(\"userId\", resLogin.data.user_id, 10);\n      });\n    });\n    return res;\n  } catch (err) {\n    dispatch({\n      type: \"LOGIN_FAILURE\",\n      payload: err\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/s3q/Documents/GitHub/medical-encyclopedia/medical-encyclopedia-app/src/ApiContext.js"],"names":["Api","Browser","autoLoginApiContext","dispatch","loginId","getCookie","userId","console","log","fetchSaveLoginUser","then","res","status","data","type","payload","window","location","pathname","updateLoginApiContext","updateLoginUser","loginApiContext","userCredentials","loginUser","saveLoginUser","resLogin","setCookie","login_id","user_id","err"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,iBAAhB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,MAAOC,QAAP,IAAoB;AAEnD,QAAMC,OAAO,GAAGH,OAAO,CAACI,SAAR,CAAkB,SAAlB,CAAhB;AACA,QAAMC,MAAM,GAAGL,OAAO,CAACI,SAAR,CAAkB,QAAlB,CAAf;AAEAE,EAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ,EAAqBE,MAArB;;AACA,MAAIA,MAAM,IAAIF,OAAd,EAAuB;AACnB,UAAMJ,GAAG,CAACS,kBAAJ,CAAuBL,OAAvB,EAAgCE,MAAhC,EAAwCI,IAAxC,CAA6CC,GAAG,IAAI;AACtD,UAAIA,GAAG,CAACC,MAAJ,IAAc,GAAd,IAAqBD,GAAG,CAACE,IAAzB,IAAiCF,GAAG,CAACE,IAAJ,IAAY,EAAjD,EAAqD;AACjDV,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,OAAO,EAAEJ,GAAG,CAACE;AAAtC,SAAD,CAAR,CADiD,CAGjD;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACH,OAfD,MAeO;AACHV,QAAAA,QAAQ,CAAC;AAAEW,UAAAA,IAAI,EAAE,eAAR;AAAyBC,UAAAA,OAAO,EAAE;AAAlC,SAAD,CAAR;AACAC,QAAAA,MAAM,CAACC,QAAP,CAAgBC,QAAhB,GAA2B,QAA3B;AACH;AACJ,KApBK,CAAN;AAsBH;AACJ,CA9BM;AAiCP,OAAO,MAAMC,qBAAqB,GAAG,MAAOhB,QAAP,IAAoB;AAErD,QAAMC,OAAO,GAAGH,OAAO,CAACI,SAAR,CAAkB,SAAlB,CAAhB;AACA,QAAMC,MAAM,GAAGL,OAAO,CAACI,SAAR,CAAkB,QAAlB,CAAf;;AAEA,MAAIC,MAAM,IAAIF,OAAd,EAAuB;AAEnB,UAAMJ,GAAG,CAACoB,eAAJ,CAAoBhB,OAApB,EAA6BE,MAA7B,EAAqCI,IAArC,CAA0CC,GAAG,IAAI;AACnDR,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,cAAR;AAAwBC,QAAAA,OAAO,EAAEJ,GAAG,CAACE;AAArC,OAAD,CAAR;AACH,KAFK,CAAN;AAIH;AACJ,CAZM;AAcP,OAAO,MAAMQ,eAAe,GAAG,OAAOC,eAAP,EAAwBnB,QAAxB,KAAqC;AAChEA,EAAAA,QAAQ,CAAC;AAAEW,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAR;;AACA,MAAI;AACA,UAAMH,GAAG,GAAG,MAAMX,GAAG,CAACuB,SAAJ,CAAcD,eAAd,EAA+BZ,IAA/B,CAAoCC,GAAG,IAAI;AACzDR,MAAAA,QAAQ,CAAC;AAAEW,QAAAA,IAAI,EAAE,eAAR;AAAyBC,QAAAA,OAAO,EAAEJ,GAAG,CAACE;AAAtC,OAAD,CAAR;AAEAb,MAAAA,GAAG,CAACwB,aAAJ,CAAkBF,eAAlB,EAAmCZ,IAAnC,CAAwCe,QAAQ,IAAI;AAChDxB,QAAAA,OAAO,CAACyB,SAAR,CAAkB,SAAlB,EAA6BD,QAAQ,CAACZ,IAAT,CAAcc,QAA3C,EAAqD,EAArD;AACA1B,QAAAA,OAAO,CAACyB,SAAR,CAAkB,QAAlB,EAA4BD,QAAQ,CAACZ,IAAT,CAAce,OAA1C,EAAmD,EAAnD;AACH,OAHD;AAIH,KAPiB,CAAlB;AAQA,WAAOjB,GAAP;AACH,GAVD,CAUE,OAAOkB,GAAP,EAAY;AACV1B,IAAAA,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE,eAAR;AAAyBC,MAAAA,OAAO,EAAEc;AAAlC,KAAD,CAAR;AACH;AACJ,CAfM","sourcesContent":["import Api from \"./functions/Api\"\r\nimport Browser from \"./functions/Browser\"\r\n\r\nexport const autoLoginApiContext = async (dispatch) => {\r\n\r\n    const loginId = Browser.getCookie(\"loginId\")\r\n    const userId = Browser.getCookie(\"userId\")\r\n\r\n    console.log(loginId, userId)\r\n    if (userId && loginId) {\r\n        await Api.fetchSaveLoginUser(loginId, userId).then(res => {\r\n            if (res.status == 200 && res.data && res.data != {}) {\r\n                dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data })\r\n                \r\n                // let lastUrlVistedArray = Browser.getHistoryUrl()\r\n                // console.log(lastUrlVistedArray)\r\n                // let lastUrlVisted = lastUrlVistedArray[lastUrlVistedArray.length - 1]\r\n                // console.log(lastUrlVisted, window.location.href, lastUrlVisted != window.location.href)\r\n\r\n                // if (lastUrlVisted != window.location.href) {\r\n\r\n                //     window.location.href = lastUrlVisted\r\n                // }\r\n                // else {\r\n                //     window.location.href = window.location.host\r\n                // }\r\n            } else {\r\n                dispatch({ type: \"LOGIN_FAILURE\", payload: {} })\r\n                window.location.pathname = \"/login\"\r\n            }\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\nexport const updateLoginApiContext = async (dispatch) => {\r\n\r\n    const loginId = Browser.getCookie(\"loginId\")\r\n    const userId = Browser.getCookie(\"userId\")\r\n\r\n    if (userId && loginId) {\r\n\r\n        await Api.updateLoginUser(loginId, userId).then(res => {\r\n            dispatch({ type: \"UPDATE_LOGIN\", payload: res.data })\r\n        })\r\n\r\n    }\r\n}\r\n\r\nexport const loginApiContext = async (userCredentials, dispatch) => {\r\n    dispatch({ type: \"LOGIN_START\" })\r\n    try {\r\n        const res = await Api.loginUser(userCredentials).then(res => {\r\n            dispatch({ type: \"LOGIN_SUCCESS\", payload: res.data })\r\n\r\n            Api.saveLoginUser(userCredentials).then(resLogin => {\r\n                Browser.setCookie(\"loginId\", resLogin.data.login_id, 10)\r\n                Browser.setCookie(\"userId\", resLogin.data.user_id, 10)\r\n            })\r\n        })\r\n        return res\r\n    } catch (err) {\r\n        dispatch({ type: \"LOGIN_FAILURE\", payload: err })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}